{"Constants": {"Constant187": {"dim": 1, "values": [62.56570816040039]},
               "Constant192": {"dim": 1, "values": [-12.346935272216797]},
               "Constant193": {"dim": 1, "values": [12.346935272216797]},
               "Constant197": {"dim": 1, "values": [-0.0267950389534235]},
               "Constant198": {"dim": 1, "values": [0.0267950389534235]},
               "Constant202": {"dim": 1, "values": [-10.436466217041016]},
               "Constant203": {"dim": 1, "values": [6.740731716156006]},
               "L": {"dim": 1, "values": [2.6489999294281006]},
               "ax_center_0": {"dim": 1, "values": [-10.936466217041016]},
               "ax_center_1": {"dim": 1, "values": [-7.290977478027344]},
               "ax_center_2": {"dim": 1, "values": [-3.645488739013672]},
               "ax_center_3": {"dim": 1, "values": [0.0]},
               "ax_center_4": {"dim": 1, "values": [2.4135773181915283]},
               "ax_center_5": {"dim": 1, "values": [4.827154636383057]},
               "ax_center_6": {"dim": 1, "values": [7.240731716156006]},
               "ay_center_0": {"dim": 1, "values": [0.0]},
               "ay_center_1": {"dim": 1, "values": [2.224489212036133]},
               "ay_center_2": {"dim": 1, "values": [4.448978424072266]},
               "ay_center_3": {"dim": 1, "values": [6.673467636108398]},
               "ay_center_4": {"dim": 1, "values": [8.897956848144531]},
               "ay_center_5": {"dim": 1, "values": [11.122446060180664]},
               "ay_center_6": {"dim": 1, "values": [13.346935272216797]}},
 "Functions": {"FFuzzify210": {"centers": [0.0,
                                           2.2244891552910855,
                                           4.448978310582171,
                                           6.673467465873257,
                                           8.897956621164342,
                                           11.122445776455427,
                                           13.346934931746512],
                               "dim_out": {"dim": 7},
                               "functions": "Triangular",
                               "names": "Triangular"},
               "FFuzzify211": {"centers": [-10.936466563835616,
                                           -7.290977709223744,
                                           -3.645488854611872,
                                           0.0,
                                           2.413577233679078,
                                           4.827154467358156,
                                           7.240731701037234],
                               "dim_out": {"dim": 7},
                               "functions": "Triangular",
                               "names": "Triangular"},
               "FFuzzify256": {"centers": [9.0,
                                           22.5,
                                           36.0,
                                           49.5,
                                           63.0,
                                           76.5,
                                           90.0],
                               "dim_out": {"dim": 7},
                               "functions": "Triangular",
                               "names": "Triangular"},
               "FParamFun185": {"code": "def normalize_fun(x,x_max):\n  return x/x_max\n",
                                "in_dim": [{"dim": 1, "sw": 15}, {"dim": 1}],
                                "map_over_dim": false,
                                "n_input": 2,
                                "name": "normalize_fun",
                                "params_and_consts": []},
               "FParamFun189": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "in_dim": [{"dim": 1, "sw": 15},
                                           {"dim": 1},
                                           {"dim": 1}],
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "params_and_consts": []},
               "FParamFun194": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "in_dim": [{"dim": 1, "sw": 15},
                                           {"dim": 1},
                                           {"dim": 1}],
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "params_and_consts": []},
               "FParamFun199": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "in_dim": [{"dim": 1, "sw": 15},
                                           {"dim": 1},
                                           {"dim": 1}],
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "params_and_consts": []},
               "FParamFun209": {"code": "def abs_fun(x):\n  return torch.abs(x)\n",
                                "in_dim": [{"dim": 1, "sw": 15}],
                                "map_over_dim": false,
                                "n_input": 1,
                                "name": "abs_fun",
                                "params_and_consts": []},
               "FParamFun254": {"code": "def handling_diagr_local(curv,ay,ax,vx_norm,  # inputs\n                         ay_0,ax_0,L,       # constants\n                         k1_vx,k2_vx,            # learnable arrays of parameters\n                         S_ay,S_ax          # learnable arrays of parameters\n                         ):\n  sign_ay = torch.sign(ay)  # sign of the lateral acceleration\n\n  # compute k1, as a function of vx \n  k1_vx_fun = k1_vx[0,0,0]\n  for ii in range(1,k1_vx.size(2)):\n    k1_vx_fun = k1_vx_fun + k1_vx[0,0,ii]*torch.pow(vx_norm,ii)\n\n  # compute k2, as a function of vx\n  k2_vx_fun = k2_vx[0,0,0]\n  for ii in range(1,k2_vx.size(2)):\n    k2_vx_fun = k2_vx_fun + k2_vx[0,0,ii]*torch.pow(vx_norm,ii)\n\n  # learnable weights of the local model for ay around ay_0\n  S_ay_1 = S_ay[0,0,0]\n  S_ay_2 = S_ay[0,0,1]\n  S_ay_3 = S_ay[0,0,2]\n  S_ay_4 = S_ay[0,0,3]\n\n  # learnable weights of the local model for ax around ax_0\n  S_ax_1 = S_ax[0,0,0]\n  S_ax_2 = S_ax[0,0,1]\n  S_ax_3 = S_ax[0,0,2]\n  S_ax_4 = S_ax[0,0,3]\n  S_ax_5 = S_ax[0,0,4]\n\n  # output of the local model of the handling diagram\n  output = curv*L + k1_vx_fun*sign_ay + k2_vx_fun*(ay - ay_0*sign_ay) +\\\n           S_ay_1*S_ax_1*(ay - (ay_0+S_ay_2)*sign_ay)*(S_ax_2 + ax - ax_0)*(1 + \\\n           S_ay_3*(ay - ay_0*sign_ay) + S_ax_3*(ax - ax_0) + S_ax_4*(ax - ax_0)**2 + \\\n           S_ay_4*S_ax_5*(ay - ay_0*sign_ay)*(ax - ax_0))\n  return output\n",
                                "in_dim": [{"dim": 1, "sw": 15},
                                           {"dim": 1, "sw": 15},
                                           {"dim": 1, "sw": 15},
                                           {"dim": 1, "sw": 15},
                                           {"dim": 1},
                                           {"dim": 1},
                                           {"dim": 1},
                                           {"dim": [1, 1, 4]},
                                           {"dim": [1, 1, 2]},
                                           {"dim": [1, 1, 4]},
                                           {"dim": [1, 1, 5]}],
                                "map_over_dim": false,
                                "n_input": 11,
                                "name": "handling_diagr_local",
                                "params_and_consts": []}},
 "Info": {"SampleTime": 1,
          "nnodely_version": "1.5.1",
          "ns": [0, 15],
          "ntot": 15,
          "num_parameters": 840},
 "Inputs": {"ax": {"dim": 1, "ns": [0, 15], "ntot": 15, "sw": [0, 15]},
            "ay": {"dim": 1, "ns": [0, 15], "ntot": 15, "sw": [0, 15]},
            "curv": {"dim": 1, "ns": [0, 15], "ntot": 15, "sw": [0, 15]},
            "steer_target": {"dim": 1, "ns": [0, 1], "ntot": 1, "sw": [0, 1]},
            "vx": {"dim": 1, "ns": [0, 15], "ntot": 15, "sw": [0, 15]}},
 "Minimizers": {"steer_error": {"A": "SamplePart2629",
                                "B": "Add2627",
                                "loss": "rmse"}},
 "Models": "steer_ctrl",
 "Outputs": {"steering_angle": "Add2627"},
 "Parameters": {"PFir258W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir260W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.006008767522871494],
                                        [0.005123142618685961],
                                        [0.004035552032291889],
                                        [0.003081538714468479],
                                        [0.0015394974034279585],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir262W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.08319303393363953],
                                        [0.08391399681568146],
                                        [0.08483771234750748],
                                        [0.08491259068250656],
                                        [0.08374590426683426],
                                        [0.0824408233165741],
                                        [0.08187670260667801],
                                        [0.08170855045318604],
                                        [0.081844761967659],
                                        [0.08183647692203522],
                                        [0.0819142684340477],
                                        [0.08175789564847946],
                                        [0.08118921518325806],
                                        [0.08002979308366776],
                                        [0.07893333584070206]]},
                "PFir264W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.08400999009609222],
                                        [0.0839986652135849],
                                        [0.08411917090415955],
                                        [0.08459071815013885],
                                        [0.08484215289354324],
                                        [0.08516564220190048],
                                        [0.08582910150289536],
                                        [0.086102694272995],
                                        [0.08596525341272354],
                                        [0.08569874614477158],
                                        [0.08530613780021667],
                                        [0.08503422886133194],
                                        [0.08452210575342178],
                                        [0.0842357650399208],
                                        [0.0842006504535675]]},
                "PFir266W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.08234710246324539],
                                        [0.08253118395805359],
                                        [0.08214905112981796],
                                        [0.08184986561536789],
                                        [0.08166545629501343],
                                        [0.08111786097288132],
                                        [0.08046934753656387],
                                        [0.07996588200330734],
                                        [0.08021911978721619],
                                        [0.08066470175981522],
                                        [0.08144066482782364],
                                        [0.08186261355876923],
                                        [0.08195168524980545],
                                        [0.08270253986120224],
                                        [0.08349081128835678]]},
                "PFir268W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.05590703710913658],
                                        [0.055497169494628906],
                                        [0.0593813993036747],
                                        [0.061456192284822464],
                                        [0.0599994920194149],
                                        [0.06073909252882004],
                                        [0.06312929838895798],
                                        [0.06457586586475372],
                                        [0.0640033707022667],
                                        [0.06093071773648262],
                                        [0.059245456010103226],
                                        [0.059871651232242584],
                                        [0.06008231267333031],
                                        [0.059054695069789886],
                                        [0.057720690965652466]]},
                "PFir270W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir272W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09236565232276917],
                                        [0.09243961423635483],
                                        [0.09247870743274689],
                                        [0.0929315909743309],
                                        [0.09312877058982849],
                                        [0.09308488667011261],
                                        [0.09277845919132233],
                                        [0.09220787137746811],
                                        [0.0921890065073967],
                                        [0.09220410883426666],
                                        [0.09192794561386108],
                                        [0.0914800837635994],
                                        [0.09132389724254608],
                                        [0.09100090712308884],
                                        [0.09073048830032349]]},
                "PFir274W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.0913613885641098],
                                        [0.09158279001712799],
                                        [0.09165389835834503],
                                        [0.09174341708421707],
                                        [0.09162513166666031],
                                        [0.09172505140304565],
                                        [0.09183260798454285],
                                        [0.09197142720222473],
                                        [0.09203380346298218],
                                        [0.09174668788909912],
                                        [0.09129708260297775],
                                        [0.09090589731931686],
                                        [0.09064145386219025],
                                        [0.09031380712985992],
                                        [0.09016403555870056]]},
                "PFir276W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09499428421258926],
                                        [0.09482938051223755],
                                        [0.09471864253282547],
                                        [0.0945689007639885],
                                        [0.0944226011633873],
                                        [0.09433070570230484],
                                        [0.09420875459909439],
                                        [0.09407290816307068],
                                        [0.09390377998352051],
                                        [0.09372630715370178],
                                        [0.09356552362442017],
                                        [0.09339163452386856],
                                        [0.09323764592409134],
                                        [0.09304852783679962],
                                        [0.09291501343250275]]},
                "PFir278W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09532371908426285],
                                        [0.09519969671964645],
                                        [0.09510914981365204],
                                        [0.09503448754549026],
                                        [0.09496612846851349],
                                        [0.09488648921251297],
                                        [0.09484927356243134],
                                        [0.09478705376386642],
                                        [0.09469585865736008],
                                        [0.09462260454893112],
                                        [0.09453633427619934],
                                        [0.0944565162062645],
                                        [0.09433393180370331],
                                        [0.09424538910388947],
                                        [0.09418100863695145]]},
                "PFir280W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09494015574455261],
                                        [0.094950370490551],
                                        [0.09495893120765686],
                                        [0.09498834609985352],
                                        [0.09498703479766846],
                                        [0.09498504549264908],
                                        [0.09494826197624207],
                                        [0.09491673111915588],
                                        [0.09487617760896683],
                                        [0.09486798942089081],
                                        [0.09484834223985672],
                                        [0.09481300413608551],
                                        [0.09478817880153656],
                                        [0.09476322680711746],
                                        [0.09475847333669662]]},
                "PFir282W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09562887996435165],
                                        [0.09564642608165741],
                                        [0.09567216783761978],
                                        [0.09572792053222656],
                                        [0.09580368548631668],
                                        [0.0958409234881401],
                                        [0.09588191658258438],
                                        [0.09591829031705856],
                                        [0.09601563215255737],
                                        [0.09607142955064774],
                                        [0.09616061300039291],
                                        [0.09616904705762863],
                                        [0.0962299108505249],
                                        [0.09626960009336472],
                                        [0.09626375883817673]]},
                "PFir284W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.0819050669670105],
                                        [0.08146567642688751],
                                        [0.0817643478512764],
                                        [0.08072914928197861],
                                        [0.07952719926834106],
                                        [0.07869037985801697],
                                        [0.08058628439903259],
                                        [0.08041281998157501],
                                        [0.0792093276977539],
                                        [0.08049554377794266],
                                        [0.08196844160556793],
                                        [0.08223989605903625],
                                        [0.08105029910802841],
                                        [0.08091036230325699],
                                        [0.08002633601427078]]},
                "PFir286W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09496640413999557],
                                        [0.09464085847139359],
                                        [0.09437470138072968],
                                        [0.09394539892673492],
                                        [0.09356619417667389],
                                        [0.09309977293014526],
                                        [0.09267888218164444],
                                        [0.09213053435087204],
                                        [0.09156455099582672],
                                        [0.0909913033246994],
                                        [0.0903596356511116],
                                        [0.08969561010599136],
                                        [0.08899179100990295],
                                        [0.08828256279230118],
                                        [0.0876278355717659]]},
                "PFir288W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09417816251516342],
                                        [0.09407294541597366],
                                        [0.0939701721072197],
                                        [0.09389061480760574],
                                        [0.09369658678770065],
                                        [0.09355571866035461],
                                        [0.09341602772474289],
                                        [0.09315655380487442],
                                        [0.09285255521535873],
                                        [0.09251005947589874],
                                        [0.09209015220403671],
                                        [0.09169689565896988],
                                        [0.09103738516569138],
                                        [0.09031769633293152],
                                        [0.08976364880800247]]},
                "PFir290W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09498228132724762],
                                        [0.09474258869886398],
                                        [0.0945655107498169],
                                        [0.09434432536363602],
                                        [0.09417949616909027],
                                        [0.09402022510766983],
                                        [0.0938631221652031],
                                        [0.09371312707662582],
                                        [0.09352176636457443],
                                        [0.09329995512962341],
                                        [0.09314672648906708],
                                        [0.09296099096536636],
                                        [0.09274225682020187],
                                        [0.09251232445240021],
                                        [0.09226696938276291]]},
                "PFir292W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.0963631197810173],
                                        [0.09622694551944733],
                                        [0.09608692675828934],
                                        [0.09593015164136887],
                                        [0.09576112776994705],
                                        [0.09559974074363708],
                                        [0.09543092548847198],
                                        [0.09522603452205658],
                                        [0.09507078677415848],
                                        [0.09488885849714279],
                                        [0.09471024572849274],
                                        [0.09452742338180542],
                                        [0.09433009475469589],
                                        [0.09420616924762726],
                                        [0.09402354061603546]]},
                "PFir294W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09709562361240387],
                                        [0.0971049889922142],
                                        [0.09711983054876328],
                                        [0.0971500426530838],
                                        [0.09716346114873886],
                                        [0.0971706435084343],
                                        [0.09715452045202255],
                                        [0.0971306636929512],
                                        [0.097103051841259],
                                        [0.097077876329422],
                                        [0.09704433381557465],
                                        [0.09702696651220322],
                                        [0.0969957709312439],
                                        [0.09698048233985901],
                                        [0.0969635397195816]]},
                "PFir296W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09711065888404846],
                                        [0.09716729074716568],
                                        [0.09725122153759003],
                                        [0.09729297459125519],
                                        [0.09734661877155304],
                                        [0.09738899022340775],
                                        [0.09741874039173126],
                                        [0.0974765494465828],
                                        [0.0975506529211998],
                                        [0.0976206436753273],
                                        [0.09769171476364136],
                                        [0.09776782989501953],
                                        [0.0978442132472992],
                                        [0.09796988219022751],
                                        [0.0980561375617981]]},
                "PFir298W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.0840182825922966],
                                        [0.08417179435491562],
                                        [0.08427730202674866],
                                        [0.08308905363082886],
                                        [0.0817229375243187],
                                        [0.08095695823431015],
                                        [0.08261532336473465],
                                        [0.08272351324558258],
                                        [0.08173259347677231],
                                        [0.08264452964067459],
                                        [0.08425234258174896],
                                        [0.08488728106021881],
                                        [0.08415620774030685],
                                        [0.08350259065628052],
                                        [0.08234833180904388]]},
                "PFir300W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.08921529352664948],
                                        [0.08831164240837097],
                                        [0.08745118975639343],
                                        [0.08634290099143982],
                                        [0.08523747324943542],
                                        [0.08392257988452911],
                                        [0.0823720172047615],
                                        [0.08055639266967773],
                                        [0.07838761806488037],
                                        [0.07611224055290222],
                                        [0.07358812540769577],
                                        [0.07092945277690887],
                                        [0.06800739467144012],
                                        [0.06507124751806259],
                                        [0.06235352158546448]]},
                "PFir302W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.08774326741695404],
                                        [0.08708575367927551],
                                        [0.08607504516839981],
                                        [0.08487573266029358],
                                        [0.08352047204971313],
                                        [0.08179514855146408],
                                        [0.08009462803602219],
                                        [0.07798638194799423],
                                        [0.07523351162672043],
                                        [0.07215610891580582],
                                        [0.06857550144195557],
                                        [0.06494713574647903],
                                        [0.060660287737846375],
                                        [0.056197624653577805],
                                        [0.05131540820002556]]},
                "PFir304W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09207441657781601],
                                        [0.09186611324548721],
                                        [0.09171238541603088],
                                        [0.09158484637737274],
                                        [0.0913933515548706],
                                        [0.09131729602813721],
                                        [0.09120962768793106],
                                        [0.09115304052829742],
                                        [0.09098485112190247],
                                        [0.09065771847963333],
                                        [0.09043798595666885],
                                        [0.09010199457406998],
                                        [0.0898103341460228],
                                        [0.08943860977888107],
                                        [0.0891956314444542]]},
                "PFir306W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09495364874601364],
                                        [0.09470779448747635],
                                        [0.09442099183797836],
                                        [0.09411976486444473],
                                        [0.09386821836233139],
                                        [0.09371089935302734],
                                        [0.09344833344221115],
                                        [0.09305313229560852],
                                        [0.09282152354717255],
                                        [0.09264468401670456],
                                        [0.09238223731517792],
                                        [0.09210693091154099],
                                        [0.09176041185855865],
                                        [0.09151627123355865],
                                        [0.0911233127117157]]},
                "PFir308W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09616068750619888],
                                        [0.09614879637956619],
                                        [0.09616204351186752],
                                        [0.0961841344833374],
                                        [0.09619133919477463],
                                        [0.09621591866016388],
                                        [0.09621679037809372],
                                        [0.09623869508504868],
                                        [0.09620340913534164],
                                        [0.09622638672590256],
                                        [0.09622610360383987],
                                        [0.09629926085472107],
                                        [0.09636462479829788],
                                        [0.0964583083987236],
                                        [0.09656298160552979]]},
                "PFir310W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.09605274349451065],
                                        [0.0961671993136406],
                                        [0.09627240151166916],
                                        [0.09640473127365112],
                                        [0.09652221947908401],
                                        [0.09661675989627838],
                                        [0.09667767584323883],
                                        [0.09681014716625214],
                                        [0.09685720503330231],
                                        [0.09702283143997192],
                                        [0.09708894044160843],
                                        [0.09727298468351364],
                                        [0.09737644344568253],
                                        [0.09754849970340729],
                                        [0.0976651981472969]]},
                "PFir312W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.008645572699606419],
                                        [0.008119967766106129],
                                        [0.0076975272968411446],
                                        [0.0071983360685408115],
                                        [0.006752681452780962],
                                        [0.006233347114175558],
                                        [0.0056706578470766544],
                                        [0.005043374840170145],
                                        [0.004585916176438332],
                                        [0.0039379168301820755],
                                        [0.003546447027474642],
                                        [0.0027827322483062744],
                                        [0.00236805179156363],
                                        [0.0017430547159165144],
                                        [0.0009033677633851767]]},
                "PFir314W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.07449180632829666],
                                        [0.07223500311374664],
                                        [0.06933029741048813],
                                        [0.06556349992752075],
                                        [0.060292378067970276],
                                        [0.05502241104841232],
                                        [0.048751261085271835],
                                        [0.04271451383829117],
                                        [0.03547847270965576],
                                        [0.02884821593761444],
                                        [0.021311966702342033],
                                        [0.013687282800674438],
                                        [0.006069502793252468],
                                        [-0.0004628007300198078],
                                        [-0.006498662754893303]]},
                "PFir316W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.06769687682390213],
                                        [0.06215079873800278],
                                        [0.05525187775492668],
                                        [0.04775984585285187],
                                        [0.03909242898225784],
                                        [0.03117259219288826],
                                        [0.023359358310699463],
                                        [0.016799768432974815],
                                        [0.011115329340100288],
                                        [0.006243143230676651],
                                        [0.002915042918175459],
                                        [-0.00029204681050032377],
                                        [-0.0025886865332722664],
                                        [-0.0035355412401258945],
                                        [-0.0030659292824566364]]},
                "PFir318W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.026228953152894974],
                                        [0.01880793645977974],
                                        [0.013427255675196648],
                                        [0.008955574594438076],
                                        [0.007040920667350292],
                                        [0.005503230262547731],
                                        [0.005801100749522448],
                                        [0.005997308064252138],
                                        [0.0072985016740858555],
                                        [0.009274312295019627],
                                        [0.008654320612549782],
                                        [0.008847719989717007],
                                        [0.009315922856330872],
                                        [0.013973506167531013],
                                        [0.014883223921060562]]},
                "PFir320W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.029281435534358025],
                                        [0.02769356407225132],
                                        [0.026178473606705666],
                                        [0.02407442405819893],
                                        [0.021360663697123528],
                                        [0.01927662082016468],
                                        [0.01662038080394268],
                                        [0.013964517042040825],
                                        [0.011870142072439194],
                                        [0.009290431626141071],
                                        [0.007758138235658407],
                                        [0.006440482567995787],
                                        [0.005269186571240425],
                                        [0.0036775360349565744],
                                        [0.002139439107850194]]},
                "PFir322W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.028068793937563896],
                                        [0.027342749759554863],
                                        [0.027113519608974457],
                                        [0.026894796639680862],
                                        [0.026548117399215698],
                                        [0.026732787489891052],
                                        [0.026673439890146255],
                                        [0.027106666937470436],
                                        [0.027876464650034904],
                                        [0.028762413188815117],
                                        [0.03004574216902256],
                                        [0.03169162571430206],
                                        [0.03407835215330124],
                                        [0.03674961254000664],
                                        [0.03997398912906647]]},
                "PFir324W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[0.07960837334394455],
                                        [0.07991228252649307],
                                        [0.08045049011707306],
                                        [0.0816081315279007],
                                        [0.0818677768111229],
                                        [0.08256987482309341],
                                        [0.08373509347438812],
                                        [0.08420303463935852],
                                        [0.08493099361658096],
                                        [0.08579295128583908],
                                        [0.08631625026464462],
                                        [0.08690331131219864],
                                        [0.08797242492437363],
                                        [0.08848169445991516],
                                        [0.08970186114311218]]},
                "PFir326W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir328W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir330W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir332W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir334W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir336W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir338W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir340W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir342W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir344W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir346W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir348W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir350W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir352W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "PFir354W": {"dim": 1,
                             "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                          "name": "init_exp",
                                          "params": {"lambda": 5,
                                                     "max_value": 0.0001,
                                                     "monotonicity": "decreasing",
                                                     "size_index": 0}},
                             "sw": 15,
                             "values": [[9.999999747378752e-05],
                                        [6.996725278440863e-05],
                                        [4.895416714134626e-05],
                                        [3.4251886972924694e-05],
                                        [2.39651035371935e-05],
                                        [1.676772444625385e-05],
                                        [1.1731916856660973e-05],
                                        [8.208499821193982e-06],
                                        [5.743262136093108e-06],
                                        [4.018402705696644e-06],
                                        [2.811565991578391e-06],
                                        [1.9671754216687987e-06],
                                        [1.3763786910203635e-06],
                                        [9.63014372246107e-07],
                                        [6.737947160218027e-07]]},
                "S_ax_0": {"dim": [1, 1, 5],
                           "init_values": [[[0.0012889759382233024,
                                             0.0011880946112796664,
                                             -0.0008922897977754474,
                                             -0.0013169962912797928,
                                             0.0005629918305203319]]],
                           "values": [[[-0.10672304779291153,
                                        0.10137880593538284,
                                        0.1024230420589447,
                                        0.10297691822052002,
                                        0.06766440719366074]]]},
                "S_ax_1": {"dim": [1, 1, 5],
                           "init_values": [[[0.0001677116088103503,
                                             -0.0010483930818736553,
                                             0.0008717674063518643,
                                             -0.0012296870118007064,
                                             0.00012724584667012095]]],
                           "values": [[[0.10596085339784622,
                                        -0.1055622398853302,
                                        -0.10075093805789948,
                                        0.09891878068447113,
                                        -0.07002656906843185]]]},
                "S_ax_2": {"dim": [1, 1, 5],
                           "init_values": [[[0.0007449422846548259,
                                             -0.00068910006666556,
                                             0.0012476927367970347,
                                             -0.0008322529611177742,
                                             0.00010319452121620998]]],
                           "values": [[[0.11176583170890808,
                                        0.10827787965536118,
                                        0.11074426770210266,
                                        0.10910871624946594,
                                        -0.08187047392129898]]]},
                "S_ax_3": {"dim": [1, 1, 5],
                           "init_values": [[[0.0011850352166220546,
                                             -0.0010898747714236379,
                                             -0.0001286735205212608,
                                             0.0008441897807642817,
                                             0.001963794231414795]]],
                           "values": [[[-0.1097378134727478,
                                        -0.1087772399187088,
                                        -0.10781463980674744,
                                        0.10805772244930267,
                                        0.08819118142127991]]]},
                "S_ax_4": {"dim": [1, 1, 5],
                           "init_values": [[[-0.001102317706681788,
                                             -8.092297503026202e-05,
                                             0.0007338969735428691,
                                             0.00028106922400183976,
                                             -0.001483762520365417]]],
                           "values": [[[-0.11165692657232285,
                                        -0.07692745327949524,
                                        0.087039515376091,
                                        0.10983630269765854,
                                        0.07752308249473572]]]},
                "S_ax_5": {"dim": [1, 1, 5],
                           "init_values": [[[-0.0004984801635146141,
                                             -0.00018030595674645156,
                                             -0.0003828150511253625,
                                             0.0008991922368295491,
                                             5.443267946247943e-05]]],
                           "values": [[[0.10964310169219971,
                                        -0.10756312310695648,
                                        -0.10757716000080109,
                                        0.10817164182662964,
                                        -0.046982038766145706]]]},
                "S_ax_6": {"dim": [1, 1, 5],
                           "init_values": [[[0.0005400058580562472,
                                             0.0006769652827642858,
                                             -0.0003738670202437788,
                                             0.0007106860866770148,
                                             -0.0005738092004321516]]],
                           "values": [[[0.10374307632446289,
                                        -0.08723558485507965,
                                        -0.09457904100418091,
                                        0.09728175401687622,
                                        -0.06293662637472153]]]},
                "S_ay_0": {"dim": [1, 1, 4],
                           "init_values": [[[0.00014376940089277923,
                                             6.803194264648482e-05,
                                             -4.884164809482172e-05,
                                             2.693814349186141e-05]]],
                           "values": [[[-0.09018654376268387,
                                        -0.047181837260723114,
                                        -0.03999930992722511,
                                        0.009476885199546814]]]},
                "S_ay_1": {"dim": [1, 1, 4],
                           "init_values": [[[5.213208351051435e-05,
                                             0.00012581818737089634,
                                             6.006856892781798e-06,
                                             2.7149513698532246e-05]]],
                           "values": [[[-0.08143150806427002,
                                        -0.06864496320486069,
                                        -0.0543777234852314,
                                        -0.016006462275981903]]]},
                "S_ay_2": {"dim": [1, 1, 4],
                           "init_values": [[[0.00011593634553719312,
                                             -9.871158545138314e-05,
                                             -0.0001976985513465479,
                                             5.3759296861244366e-05]]],
                           "values": [[[-0.09990867972373962,
                                        -0.09764433652162552,
                                        -0.06964290142059326,
                                        -0.053907256573438644]]]},
                "S_ay_3": {"dim": [1, 1, 4],
                           "init_values": [[[-0.0002375131007283926,
                                             -3.8606045563938096e-05,
                                             -8.946868183556944e-05,
                                             7.23942430340685e-05]]],
                           "values": [[[-0.10505127906799316,
                                        -0.10253951698541641,
                                        -0.09641623497009277,
                                        -0.06911620497703552]]]},
                "S_ay_4": {"dim": [1, 1, 4],
                           "init_values": [[[0.00016879780741874129,
                                             9.084458724828437e-05,
                                             -0.00011398160859243944,
                                             -0.0001725734182400629]]],
                           "values": [[[-0.11085227876901627,
                                        -0.10777828842401505,
                                        -0.07855591177940369,
                                        -0.06870454549789429]]]},
                "S_ay_5": {"dim": [1, 1, 4],
                           "init_values": [[[4.943228850606829e-05,
                                             -0.00017898573423735797,
                                             0.0001763827895047143,
                                             0.00015474524116143584]]],
                           "values": [[[0.11131911724805832,
                                        -0.10271384567022324,
                                        -0.09897284209728241,
                                        0.08588353544473648]]]},
                "S_ay_6": {"dim": [1, 1, 4],
                           "init_values": [[[2.3293347112485208e-05,
                                             -4.3216528865741566e-05,
                                             0.00014147136243991554,
                                             -4.742674354929477e-05]]],
                           "values": [[[-0.11129137873649597,
                                        0.10868337005376816,
                                        0.1015118956565857,
                                        -0.08716040104627609]]]},
                "k1_vx_0": {"dim": [1, 1, 4],
                            "init_values": [[[-0.00012771533511113375,
                                              9.706888704386074e-06,
                                              1.103731119656004e-05,
                                              4.436948802322149e-05]]],
                            "values": [[[0.0013953775633126497,
                                         0.0021751434542238712,
                                         0.0008726333035156131,
                                         -0.0016549992142245173]]]},
                "k1_vx_1": {"dim": [1, 1, 4],
                            "init_values": [[[0.0065688383765518665,
                                              -0.013969849795103073,
                                              0.023928875103592873,
                                              -0.01263429969549179]]],
                            "values": [[[0.048185914754867554,
                                         0.02090604230761528,
                                         0.052957020699977875,
                                         0.01141057163476944]]]},
                "k1_vx_2": {"dim": [1, 1, 4],
                            "init_values": [[[0.012548751197755337,
                                              -0.0198354534804821,
                                              0.02949388325214386,
                                              -0.014218107797205448]]],
                            "values": [[[0.10165943205356598,
                                         0.06703201681375504,
                                         0.11387107521295547,
                                         0.06743185967206955]]]},
                "k1_vx_3": {"dim": [1, 1, 4],
                            "init_values": [[[0.02041812613606453,
                                              -0.026431864127516747,
                                              0.032374508678913116,
                                              -0.012594564817845821]]],
                            "values": [[[0.11750796437263489,
                                         0.0699329823255539,
                                         0.12799087166786194,
                                         0.08225151151418686]]]},
                "k1_vx_4": {"dim": [1, 1, 4],
                            "init_values": [[[0.03395230695605278,
                                              -0.05983506515622139,
                                              0.10093369334936142,
                                              -0.054919470101594925]]],
                            "values": [[[0.1358637660741806,
                                         0.041714683175086975,
                                         0.20208865404129028,
                                         0.04581072926521301]]]},
                "k1_vx_5": {"dim": [1, 1, 4],
                            "init_values": [[[0.0556078739464283,
                                              -0.0036896143574267626,
                                              -0.06567367166280746,
                                              0.052340272814035416]]],
                            "values": [[[0.159515842795372,
                                         0.09994064271450043,
                                         0.037656862288713455,
                                         0.15536412596702576]]]},
                "k1_vx_6": {"dim": [1, 1, 4],
                            "init_values": [[[0.362527459859848,
                                              -1.327288269996643,
                                              2.077582836151123,
                                              -1.044834017753601]]],
                            "values": [[[0.4661130905151367,
                                         -1.2240198850631714,
                                         2.1804850101470947,
                                         -0.9423224329948425]]]},
                "k2_vx_0": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.0498046875,
                                              -222779.71875]]],
                            "values": [[[-5134.01171875, -222779.71875]]]},
                "k2_vx_1": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.05029296875,
                                              -222779.71875]]],
                            "values": [[[-5133.9794921875, -222779.71875]]]},
                "k2_vx_2": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.05029296875,
                                              -222779.71875]]],
                            "values": [[[-5133.97119140625, -222779.71875]]]},
                "k2_vx_3": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.0498046875,
                                              -222779.71875]]],
                            "values": [[[-5133.947265625, -222779.71875]]]},
                "k2_vx_4": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.04833984375,
                                              -222779.71875]]],
                            "values": [[[-5133.94384765625, -222779.71875]]]},
                "k2_vx_5": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.0380859375,
                                              -222779.71875]]],
                            "values": [[[-5133.93408203125, -222779.71875]]]},
                "k2_vx_6": {"dim": [1, 1, 2],
                            "init_values": [[[-5134.056640625,
                                              -222779.703125]]],
                            "values": [[[-5134.16162109375, -222779.703125]]]}},
 "Relations": {"Add2284": ["Add", ["Mul1371", "Mul1390"]],
               "Add2285": ["Add", ["Add2284", "Mul1409"]],
               "Add2286": ["Add", ["Add2285", "Mul1428"]],
               "Add2287": ["Add", ["Add2286", "Mul1447"]],
               "Add2288": ["Add", ["Add2287", "Mul1466"]],
               "Add2289": ["Add", ["Add2288", "Mul1485"]],
               "Add2290": ["Add", ["Add2289", "Mul1504"]],
               "Add2291": ["Add", ["Add2290", "Mul1523"]],
               "Add2292": ["Add", ["Add2291", "Mul1542"]],
               "Add2293": ["Add", ["Add2292", "Mul1561"]],
               "Add2294": ["Add", ["Add2293", "Mul1580"]],
               "Add2295": ["Add", ["Add2294", "Mul1599"]],
               "Add2296": ["Add", ["Add2295", "Mul1618"]],
               "Add2297": ["Add", ["Add2296", "Mul1637"]],
               "Add2298": ["Add", ["Add2297", "Mul1656"]],
               "Add2299": ["Add", ["Add2298", "Mul1675"]],
               "Add2300": ["Add", ["Add2299", "Mul1694"]],
               "Add2301": ["Add", ["Add2300", "Mul1713"]],
               "Add2302": ["Add", ["Add2301", "Mul1732"]],
               "Add2303": ["Add", ["Add2302", "Mul1751"]],
               "Add2304": ["Add", ["Add2303", "Mul1770"]],
               "Add2305": ["Add", ["Add2304", "Mul1789"]],
               "Add2306": ["Add", ["Add2305", "Mul1808"]],
               "Add2307": ["Add", ["Add2306", "Mul1827"]],
               "Add2308": ["Add", ["Add2307", "Mul1846"]],
               "Add2309": ["Add", ["Add2308", "Mul1865"]],
               "Add2310": ["Add", ["Add2309", "Mul1884"]],
               "Add2311": ["Add", ["Add2310", "Mul1903"]],
               "Add2312": ["Add", ["Add2311", "Mul1922"]],
               "Add2313": ["Add", ["Add2312", "Mul1941"]],
               "Add2314": ["Add", ["Add2313", "Mul1960"]],
               "Add2315": ["Add", ["Add2314", "Mul1979"]],
               "Add2316": ["Add", ["Add2315", "Mul1998"]],
               "Add2317": ["Add", ["Add2316", "Mul2017"]],
               "Add2318": ["Add", ["Add2317", "Mul2036"]],
               "Add2319": ["Add", ["Add2318", "Mul2055"]],
               "Add2320": ["Add", ["Add2319", "Mul2074"]],
               "Add2321": ["Add", ["Add2320", "Mul2093"]],
               "Add2322": ["Add", ["Add2321", "Mul2112"]],
               "Add2323": ["Add", ["Add2322", "Mul2131"]],
               "Add2324": ["Add", ["Add2323", "Mul2150"]],
               "Add2325": ["Add", ["Add2324", "Mul2169"]],
               "Add2326": ["Add", ["Add2325", "Mul2188"]],
               "Add2327": ["Add", ["Add2326", "Mul2207"]],
               "Add2328": ["Add", ["Add2327", "Mul2226"]],
               "Add2329": ["Add", ["Add2328", "Mul2245"]],
               "Add2330": ["Add", ["Add2329", "Mul2264"]],
               "Add2331": ["Add", ["Add2330", "Mul2283"]],
               "Add2580": ["Add", ["Fir2339", "Fir2344"]],
               "Add2581": ["Add", ["Add2580", "Fir2349"]],
               "Add2582": ["Add", ["Add2581", "Fir2354"]],
               "Add2583": ["Add", ["Add2582", "Fir2359"]],
               "Add2584": ["Add", ["Add2583", "Fir2364"]],
               "Add2585": ["Add", ["Add2584", "Fir2369"]],
               "Add2586": ["Add", ["Add2585", "Fir2374"]],
               "Add2587": ["Add", ["Add2586", "Fir2379"]],
               "Add2588": ["Add", ["Add2587", "Fir2384"]],
               "Add2589": ["Add", ["Add2588", "Fir2389"]],
               "Add2590": ["Add", ["Add2589", "Fir2394"]],
               "Add2591": ["Add", ["Add2590", "Fir2399"]],
               "Add2592": ["Add", ["Add2591", "Fir2404"]],
               "Add2593": ["Add", ["Add2592", "Fir2409"]],
               "Add2594": ["Add", ["Add2593", "Fir2414"]],
               "Add2595": ["Add", ["Add2594", "Fir2419"]],
               "Add2596": ["Add", ["Add2595", "Fir2424"]],
               "Add2597": ["Add", ["Add2596", "Fir2429"]],
               "Add2598": ["Add", ["Add2597", "Fir2434"]],
               "Add2599": ["Add", ["Add2598", "Fir2439"]],
               "Add2600": ["Add", ["Add2599", "Fir2444"]],
               "Add2601": ["Add", ["Add2600", "Fir2449"]],
               "Add2602": ["Add", ["Add2601", "Fir2454"]],
               "Add2603": ["Add", ["Add2602", "Fir2459"]],
               "Add2604": ["Add", ["Add2603", "Fir2464"]],
               "Add2605": ["Add", ["Add2604", "Fir2469"]],
               "Add2606": ["Add", ["Add2605", "Fir2474"]],
               "Add2607": ["Add", ["Add2606", "Fir2479"]],
               "Add2608": ["Add", ["Add2607", "Fir2484"]],
               "Add2609": ["Add", ["Add2608", "Fir2489"]],
               "Add2610": ["Add", ["Add2609", "Fir2494"]],
               "Add2611": ["Add", ["Add2610", "Fir2499"]],
               "Add2612": ["Add", ["Add2611", "Fir2504"]],
               "Add2613": ["Add", ["Add2612", "Fir2509"]],
               "Add2614": ["Add", ["Add2613", "Fir2514"]],
               "Add2615": ["Add", ["Add2614", "Fir2519"]],
               "Add2616": ["Add", ["Add2615", "Fir2524"]],
               "Add2617": ["Add", ["Add2616", "Fir2529"]],
               "Add2618": ["Add", ["Add2617", "Fir2534"]],
               "Add2619": ["Add", ["Add2618", "Fir2539"]],
               "Add2620": ["Add", ["Add2619", "Fir2544"]],
               "Add2621": ["Add", ["Add2620", "Fir2549"]],
               "Add2622": ["Add", ["Add2621", "Fir2554"]],
               "Add2623": ["Add", ["Add2622", "Fir2559"]],
               "Add2624": ["Add", ["Add2623", "Fir2564"]],
               "Add2625": ["Add", ["Add2624", "Fir2569"]],
               "Add2626": ["Add", ["Add2625", "Fir2574"]],
               "Add2627": ["Add", ["Add2626", "Fir2579"]],
               "Fir2339": ["Fir", ["Mul2338"], "PFir258W", null, 0],
               "Fir2344": ["Fir", ["Mul2343"], "PFir260W", null, 0],
               "Fir2349": ["Fir", ["Mul2348"], "PFir262W", null, 0],
               "Fir2354": ["Fir", ["Mul2353"], "PFir264W", null, 0],
               "Fir2359": ["Fir", ["Mul2358"], "PFir266W", null, 0],
               "Fir2364": ["Fir", ["Mul2363"], "PFir268W", null, 0],
               "Fir2369": ["Fir", ["Mul2368"], "PFir270W", null, 0],
               "Fir2374": ["Fir", ["Mul2373"], "PFir272W", null, 0],
               "Fir2379": ["Fir", ["Mul2378"], "PFir274W", null, 0],
               "Fir2384": ["Fir", ["Mul2383"], "PFir276W", null, 0],
               "Fir2389": ["Fir", ["Mul2388"], "PFir278W", null, 0],
               "Fir2394": ["Fir", ["Mul2393"], "PFir280W", null, 0],
               "Fir2399": ["Fir", ["Mul2398"], "PFir282W", null, 0],
               "Fir2404": ["Fir", ["Mul2403"], "PFir284W", null, 0],
               "Fir2409": ["Fir", ["Mul2408"], "PFir286W", null, 0],
               "Fir2414": ["Fir", ["Mul2413"], "PFir288W", null, 0],
               "Fir2419": ["Fir", ["Mul2418"], "PFir290W", null, 0],
               "Fir2424": ["Fir", ["Mul2423"], "PFir292W", null, 0],
               "Fir2429": ["Fir", ["Mul2428"], "PFir294W", null, 0],
               "Fir2434": ["Fir", ["Mul2433"], "PFir296W", null, 0],
               "Fir2439": ["Fir", ["Mul2438"], "PFir298W", null, 0],
               "Fir2444": ["Fir", ["Mul2443"], "PFir300W", null, 0],
               "Fir2449": ["Fir", ["Mul2448"], "PFir302W", null, 0],
               "Fir2454": ["Fir", ["Mul2453"], "PFir304W", null, 0],
               "Fir2459": ["Fir", ["Mul2458"], "PFir306W", null, 0],
               "Fir2464": ["Fir", ["Mul2463"], "PFir308W", null, 0],
               "Fir2469": ["Fir", ["Mul2468"], "PFir310W", null, 0],
               "Fir2474": ["Fir", ["Mul2473"], "PFir312W", null, 0],
               "Fir2479": ["Fir", ["Mul2478"], "PFir314W", null, 0],
               "Fir2484": ["Fir", ["Mul2483"], "PFir316W", null, 0],
               "Fir2489": ["Fir", ["Mul2488"], "PFir318W", null, 0],
               "Fir2494": ["Fir", ["Mul2493"], "PFir320W", null, 0],
               "Fir2499": ["Fir", ["Mul2498"], "PFir322W", null, 0],
               "Fir2504": ["Fir", ["Mul2503"], "PFir324W", null, 0],
               "Fir2509": ["Fir", ["Mul2508"], "PFir326W", null, 0],
               "Fir2514": ["Fir", ["Mul2513"], "PFir328W", null, 0],
               "Fir2519": ["Fir", ["Mul2518"], "PFir330W", null, 0],
               "Fir2524": ["Fir", ["Mul2523"], "PFir332W", null, 0],
               "Fir2529": ["Fir", ["Mul2528"], "PFir334W", null, 0],
               "Fir2534": ["Fir", ["Mul2533"], "PFir336W", null, 0],
               "Fir2539": ["Fir", ["Mul2538"], "PFir338W", null, 0],
               "Fir2544": ["Fir", ["Mul2543"], "PFir340W", null, 0],
               "Fir2549": ["Fir", ["Mul2548"], "PFir342W", null, 0],
               "Fir2554": ["Fir", ["Mul2553"], "PFir344W", null, 0],
               "Fir2559": ["Fir", ["Mul2558"], "PFir346W", null, 0],
               "Fir2564": ["Fir", ["Mul2563"], "PFir348W", null, 0],
               "Fir2569": ["Fir", ["Mul2568"], "PFir350W", null, 0],
               "Fir2574": ["Fir", ["Mul2573"], "PFir352W", null, 0],
               "Fir2579": ["Fir", ["Mul2578"], "PFir354W", null, 0],
               "Fuzzify1351": ["Fuzzify", ["ParamFun1350"], "FFuzzify210"],
               "Fuzzify1352": ["Fuzzify", ["ParamFun1338"], "FFuzzify211"],
               "Fuzzify2334": ["Fuzzify", ["SamplePart2333"], "FFuzzify256"],
               "Mul1370": ["Mul", ["Select1368", "Select1369"]],
               "Mul1371": ["Mul", ["ParamFun1353", "Mul1370"]],
               "Mul1389": ["Mul", ["Select1387", "Select1388"]],
               "Mul1390": ["Mul", ["ParamFun1372", "Mul1389"]],
               "Mul1408": ["Mul", ["Select1406", "Select1407"]],
               "Mul1409": ["Mul", ["ParamFun1391", "Mul1408"]],
               "Mul1427": ["Mul", ["Select1425", "Select1426"]],
               "Mul1428": ["Mul", ["ParamFun1410", "Mul1427"]],
               "Mul1446": ["Mul", ["Select1444", "Select1445"]],
               "Mul1447": ["Mul", ["ParamFun1429", "Mul1446"]],
               "Mul1465": ["Mul", ["Select1463", "Select1464"]],
               "Mul1466": ["Mul", ["ParamFun1448", "Mul1465"]],
               "Mul1484": ["Mul", ["Select1482", "Select1483"]],
               "Mul1485": ["Mul", ["ParamFun1467", "Mul1484"]],
               "Mul1503": ["Mul", ["Select1501", "Select1502"]],
               "Mul1504": ["Mul", ["ParamFun1486", "Mul1503"]],
               "Mul1522": ["Mul", ["Select1520", "Select1521"]],
               "Mul1523": ["Mul", ["ParamFun1505", "Mul1522"]],
               "Mul1541": ["Mul", ["Select1539", "Select1540"]],
               "Mul1542": ["Mul", ["ParamFun1524", "Mul1541"]],
               "Mul1560": ["Mul", ["Select1558", "Select1559"]],
               "Mul1561": ["Mul", ["ParamFun1543", "Mul1560"]],
               "Mul1579": ["Mul", ["Select1577", "Select1578"]],
               "Mul1580": ["Mul", ["ParamFun1562", "Mul1579"]],
               "Mul1598": ["Mul", ["Select1596", "Select1597"]],
               "Mul1599": ["Mul", ["ParamFun1581", "Mul1598"]],
               "Mul1617": ["Mul", ["Select1615", "Select1616"]],
               "Mul1618": ["Mul", ["ParamFun1600", "Mul1617"]],
               "Mul1636": ["Mul", ["Select1634", "Select1635"]],
               "Mul1637": ["Mul", ["ParamFun1619", "Mul1636"]],
               "Mul1655": ["Mul", ["Select1653", "Select1654"]],
               "Mul1656": ["Mul", ["ParamFun1638", "Mul1655"]],
               "Mul1674": ["Mul", ["Select1672", "Select1673"]],
               "Mul1675": ["Mul", ["ParamFun1657", "Mul1674"]],
               "Mul1693": ["Mul", ["Select1691", "Select1692"]],
               "Mul1694": ["Mul", ["ParamFun1676", "Mul1693"]],
               "Mul1712": ["Mul", ["Select1710", "Select1711"]],
               "Mul1713": ["Mul", ["ParamFun1695", "Mul1712"]],
               "Mul1731": ["Mul", ["Select1729", "Select1730"]],
               "Mul1732": ["Mul", ["ParamFun1714", "Mul1731"]],
               "Mul1750": ["Mul", ["Select1748", "Select1749"]],
               "Mul1751": ["Mul", ["ParamFun1733", "Mul1750"]],
               "Mul1769": ["Mul", ["Select1767", "Select1768"]],
               "Mul1770": ["Mul", ["ParamFun1752", "Mul1769"]],
               "Mul1788": ["Mul", ["Select1786", "Select1787"]],
               "Mul1789": ["Mul", ["ParamFun1771", "Mul1788"]],
               "Mul1807": ["Mul", ["Select1805", "Select1806"]],
               "Mul1808": ["Mul", ["ParamFun1790", "Mul1807"]],
               "Mul1826": ["Mul", ["Select1824", "Select1825"]],
               "Mul1827": ["Mul", ["ParamFun1809", "Mul1826"]],
               "Mul1845": ["Mul", ["Select1843", "Select1844"]],
               "Mul1846": ["Mul", ["ParamFun1828", "Mul1845"]],
               "Mul1864": ["Mul", ["Select1862", "Select1863"]],
               "Mul1865": ["Mul", ["ParamFun1847", "Mul1864"]],
               "Mul1883": ["Mul", ["Select1881", "Select1882"]],
               "Mul1884": ["Mul", ["ParamFun1866", "Mul1883"]],
               "Mul1902": ["Mul", ["Select1900", "Select1901"]],
               "Mul1903": ["Mul", ["ParamFun1885", "Mul1902"]],
               "Mul1921": ["Mul", ["Select1919", "Select1920"]],
               "Mul1922": ["Mul", ["ParamFun1904", "Mul1921"]],
               "Mul1940": ["Mul", ["Select1938", "Select1939"]],
               "Mul1941": ["Mul", ["ParamFun1923", "Mul1940"]],
               "Mul1959": ["Mul", ["Select1957", "Select1958"]],
               "Mul1960": ["Mul", ["ParamFun1942", "Mul1959"]],
               "Mul1978": ["Mul", ["Select1976", "Select1977"]],
               "Mul1979": ["Mul", ["ParamFun1961", "Mul1978"]],
               "Mul1997": ["Mul", ["Select1995", "Select1996"]],
               "Mul1998": ["Mul", ["ParamFun1980", "Mul1997"]],
               "Mul2016": ["Mul", ["Select2014", "Select2015"]],
               "Mul2017": ["Mul", ["ParamFun1999", "Mul2016"]],
               "Mul2035": ["Mul", ["Select2033", "Select2034"]],
               "Mul2036": ["Mul", ["ParamFun2018", "Mul2035"]],
               "Mul2054": ["Mul", ["Select2052", "Select2053"]],
               "Mul2055": ["Mul", ["ParamFun2037", "Mul2054"]],
               "Mul2073": ["Mul", ["Select2071", "Select2072"]],
               "Mul2074": ["Mul", ["ParamFun2056", "Mul2073"]],
               "Mul2092": ["Mul", ["Select2090", "Select2091"]],
               "Mul2093": ["Mul", ["ParamFun2075", "Mul2092"]],
               "Mul2111": ["Mul", ["Select2109", "Select2110"]],
               "Mul2112": ["Mul", ["ParamFun2094", "Mul2111"]],
               "Mul2130": ["Mul", ["Select2128", "Select2129"]],
               "Mul2131": ["Mul", ["ParamFun2113", "Mul2130"]],
               "Mul2149": ["Mul", ["Select2147", "Select2148"]],
               "Mul2150": ["Mul", ["ParamFun2132", "Mul2149"]],
               "Mul2168": ["Mul", ["Select2166", "Select2167"]],
               "Mul2169": ["Mul", ["ParamFun2151", "Mul2168"]],
               "Mul2187": ["Mul", ["Select2185", "Select2186"]],
               "Mul2188": ["Mul", ["ParamFun2170", "Mul2187"]],
               "Mul2206": ["Mul", ["Select2204", "Select2205"]],
               "Mul2207": ["Mul", ["ParamFun2189", "Mul2206"]],
               "Mul2225": ["Mul", ["Select2223", "Select2224"]],
               "Mul2226": ["Mul", ["ParamFun2208", "Mul2225"]],
               "Mul2244": ["Mul", ["Select2242", "Select2243"]],
               "Mul2245": ["Mul", ["ParamFun2227", "Mul2244"]],
               "Mul2263": ["Mul", ["Select2261", "Select2262"]],
               "Mul2264": ["Mul", ["ParamFun2246", "Mul2263"]],
               "Mul2282": ["Mul", ["Select2280", "Select2281"]],
               "Mul2283": ["Mul", ["ParamFun2265", "Mul2282"]],
               "Mul2337": ["Mul", ["Select2335", "Select2336"]],
               "Mul2338": ["Mul", ["Add2331", "Mul2337"]],
               "Mul2342": ["Mul", ["Select2340", "Select2341"]],
               "Mul2343": ["Mul", ["Add2331", "Mul2342"]],
               "Mul2347": ["Mul", ["Select2345", "Select2346"]],
               "Mul2348": ["Mul", ["Add2331", "Mul2347"]],
               "Mul2352": ["Mul", ["Select2350", "Select2351"]],
               "Mul2353": ["Mul", ["Add2331", "Mul2352"]],
               "Mul2357": ["Mul", ["Select2355", "Select2356"]],
               "Mul2358": ["Mul", ["Add2331", "Mul2357"]],
               "Mul2362": ["Mul", ["Select2360", "Select2361"]],
               "Mul2363": ["Mul", ["Add2331", "Mul2362"]],
               "Mul2367": ["Mul", ["Select2365", "Select2366"]],
               "Mul2368": ["Mul", ["Add2331", "Mul2367"]],
               "Mul2372": ["Mul", ["Select2370", "Select2371"]],
               "Mul2373": ["Mul", ["Add2331", "Mul2372"]],
               "Mul2377": ["Mul", ["Select2375", "Select2376"]],
               "Mul2378": ["Mul", ["Add2331", "Mul2377"]],
               "Mul2382": ["Mul", ["Select2380", "Select2381"]],
               "Mul2383": ["Mul", ["Add2331", "Mul2382"]],
               "Mul2387": ["Mul", ["Select2385", "Select2386"]],
               "Mul2388": ["Mul", ["Add2331", "Mul2387"]],
               "Mul2392": ["Mul", ["Select2390", "Select2391"]],
               "Mul2393": ["Mul", ["Add2331", "Mul2392"]],
               "Mul2397": ["Mul", ["Select2395", "Select2396"]],
               "Mul2398": ["Mul", ["Add2331", "Mul2397"]],
               "Mul2402": ["Mul", ["Select2400", "Select2401"]],
               "Mul2403": ["Mul", ["Add2331", "Mul2402"]],
               "Mul2407": ["Mul", ["Select2405", "Select2406"]],
               "Mul2408": ["Mul", ["Add2331", "Mul2407"]],
               "Mul2412": ["Mul", ["Select2410", "Select2411"]],
               "Mul2413": ["Mul", ["Add2331", "Mul2412"]],
               "Mul2417": ["Mul", ["Select2415", "Select2416"]],
               "Mul2418": ["Mul", ["Add2331", "Mul2417"]],
               "Mul2422": ["Mul", ["Select2420", "Select2421"]],
               "Mul2423": ["Mul", ["Add2331", "Mul2422"]],
               "Mul2427": ["Mul", ["Select2425", "Select2426"]],
               "Mul2428": ["Mul", ["Add2331", "Mul2427"]],
               "Mul2432": ["Mul", ["Select2430", "Select2431"]],
               "Mul2433": ["Mul", ["Add2331", "Mul2432"]],
               "Mul2437": ["Mul", ["Select2435", "Select2436"]],
               "Mul2438": ["Mul", ["Add2331", "Mul2437"]],
               "Mul2442": ["Mul", ["Select2440", "Select2441"]],
               "Mul2443": ["Mul", ["Add2331", "Mul2442"]],
               "Mul2447": ["Mul", ["Select2445", "Select2446"]],
               "Mul2448": ["Mul", ["Add2331", "Mul2447"]],
               "Mul2452": ["Mul", ["Select2450", "Select2451"]],
               "Mul2453": ["Mul", ["Add2331", "Mul2452"]],
               "Mul2457": ["Mul", ["Select2455", "Select2456"]],
               "Mul2458": ["Mul", ["Add2331", "Mul2457"]],
               "Mul2462": ["Mul", ["Select2460", "Select2461"]],
               "Mul2463": ["Mul", ["Add2331", "Mul2462"]],
               "Mul2467": ["Mul", ["Select2465", "Select2466"]],
               "Mul2468": ["Mul", ["Add2331", "Mul2467"]],
               "Mul2472": ["Mul", ["Select2470", "Select2471"]],
               "Mul2473": ["Mul", ["Add2331", "Mul2472"]],
               "Mul2477": ["Mul", ["Select2475", "Select2476"]],
               "Mul2478": ["Mul", ["Add2331", "Mul2477"]],
               "Mul2482": ["Mul", ["Select2480", "Select2481"]],
               "Mul2483": ["Mul", ["Add2331", "Mul2482"]],
               "Mul2487": ["Mul", ["Select2485", "Select2486"]],
               "Mul2488": ["Mul", ["Add2331", "Mul2487"]],
               "Mul2492": ["Mul", ["Select2490", "Select2491"]],
               "Mul2493": ["Mul", ["Add2331", "Mul2492"]],
               "Mul2497": ["Mul", ["Select2495", "Select2496"]],
               "Mul2498": ["Mul", ["Add2331", "Mul2497"]],
               "Mul2502": ["Mul", ["Select2500", "Select2501"]],
               "Mul2503": ["Mul", ["Add2331", "Mul2502"]],
               "Mul2507": ["Mul", ["Select2505", "Select2506"]],
               "Mul2508": ["Mul", ["Add2331", "Mul2507"]],
               "Mul2512": ["Mul", ["Select2510", "Select2511"]],
               "Mul2513": ["Mul", ["Add2331", "Mul2512"]],
               "Mul2517": ["Mul", ["Select2515", "Select2516"]],
               "Mul2518": ["Mul", ["Add2331", "Mul2517"]],
               "Mul2522": ["Mul", ["Select2520", "Select2521"]],
               "Mul2523": ["Mul", ["Add2331", "Mul2522"]],
               "Mul2527": ["Mul", ["Select2525", "Select2526"]],
               "Mul2528": ["Mul", ["Add2331", "Mul2527"]],
               "Mul2532": ["Mul", ["Select2530", "Select2531"]],
               "Mul2533": ["Mul", ["Add2331", "Mul2532"]],
               "Mul2537": ["Mul", ["Select2535", "Select2536"]],
               "Mul2538": ["Mul", ["Add2331", "Mul2537"]],
               "Mul2542": ["Mul", ["Select2540", "Select2541"]],
               "Mul2543": ["Mul", ["Add2331", "Mul2542"]],
               "Mul2547": ["Mul", ["Select2545", "Select2546"]],
               "Mul2548": ["Mul", ["Add2331", "Mul2547"]],
               "Mul2552": ["Mul", ["Select2550", "Select2551"]],
               "Mul2553": ["Mul", ["Add2331", "Mul2552"]],
               "Mul2557": ["Mul", ["Select2555", "Select2556"]],
               "Mul2558": ["Mul", ["Add2331", "Mul2557"]],
               "Mul2562": ["Mul", ["Select2560", "Select2561"]],
               "Mul2563": ["Mul", ["Add2331", "Mul2562"]],
               "Mul2567": ["Mul", ["Select2565", "Select2566"]],
               "Mul2568": ["Mul", ["Add2331", "Mul2567"]],
               "Mul2572": ["Mul", ["Select2570", "Select2571"]],
               "Mul2573": ["Mul", ["Add2331", "Mul2572"]],
               "Mul2577": ["Mul", ["Select2575", "Select2576"]],
               "Mul2578": ["Mul", ["Add2331", "Mul2577"]],
               "ParamFun1316": ["ParamFun",
                                ["SamplePart1315", "Constant187"],
                                "FParamFun185"],
               "ParamFun1324": ["ParamFun",
                                ["SamplePart1323",
                                 "Constant192",
                                 "Constant193"],
                                "FParamFun189"],
               "ParamFun1331": ["ParamFun",
                                ["SamplePart1330",
                                 "Constant197",
                                 "Constant198"],
                                "FParamFun194"],
               "ParamFun1338": ["ParamFun",
                                ["SamplePart1337",
                                 "Constant202",
                                 "Constant203"],
                                "FParamFun199"],
               "ParamFun1350": ["ParamFun", ["ParamFun1324"], "FParamFun209"],
               "ParamFun1353": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun1372": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun1391": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun1410": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun1429": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun1448": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun1467": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_0",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_0",
                                 "k2_vx_0",
                                 "S_ay_0",
                                 "S_ax_6"],
                                "FParamFun254"],
               "ParamFun1486": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun1505": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun1524": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun1543": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun1562": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun1581": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun1600": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_1",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_1",
                                 "k2_vx_1",
                                 "S_ay_1",
                                 "S_ax_6"],
                                "FParamFun254"],
               "ParamFun1619": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun1638": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun1657": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun1676": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun1695": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun1714": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun1733": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_2",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_2",
                                 "k2_vx_2",
                                 "S_ay_2",
                                 "S_ax_6"],
                                "FParamFun254"],
               "ParamFun1752": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun1771": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun1790": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun1809": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun1828": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun1847": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun1866": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_3",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_3",
                                 "k2_vx_3",
                                 "S_ay_3",
                                 "S_ax_6"],
                                "FParamFun254"],
               "ParamFun1885": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun1904": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun1923": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun1942": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun1961": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun1980": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun1999": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_4",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_4",
                                 "k2_vx_4",
                                 "S_ay_4",
                                 "S_ax_6"],
                                "FParamFun254"],
               "ParamFun2018": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun2037": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun2056": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun2075": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun2094": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun2113": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun2132": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_5",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_5",
                                 "k2_vx_5",
                                 "S_ay_5",
                                 "S_ax_6"],
                                "FParamFun254"],
               "ParamFun2151": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_0",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_0"],
                                "FParamFun254"],
               "ParamFun2170": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_1",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_1"],
                                "FParamFun254"],
               "ParamFun2189": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_2",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_2"],
                                "FParamFun254"],
               "ParamFun2208": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_3",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_3"],
                                "FParamFun254"],
               "ParamFun2227": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_4",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_4"],
                                "FParamFun254"],
               "ParamFun2246": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_5",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_5"],
                                "FParamFun254"],
               "ParamFun2265": ["ParamFun",
                                ["ParamFun1331",
                                 "ParamFun1324",
                                 "ParamFun1338",
                                 "ParamFun1316",
                                 "ay_center_6",
                                 "ax_center_6",
                                 "L",
                                 "k1_vx_6",
                                 "k2_vx_6",
                                 "S_ay_6",
                                 "S_ax_6"],
                                "FParamFun254"],
               "SamplePart1315": ["SamplePart", ["vx"], -1, [0, 15]],
               "SamplePart1323": ["SamplePart", ["ay"], -1, [0, 15]],
               "SamplePart1330": ["SamplePart", ["curv"], -1, [0, 15]],
               "SamplePart1337": ["SamplePart", ["ax"], -1, [0, 15]],
               "SamplePart2333": ["SamplePart", ["vx"], -1, [0, 15]],
               "SamplePart2629": ["SamplePart", ["steer_target"], -1, [0, 1]],
               "Select1368": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1369": ["Select", ["Fuzzify1352"], 7, 0],
               "Select1387": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1388": ["Select", ["Fuzzify1352"], 7, 1],
               "Select1406": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1407": ["Select", ["Fuzzify1352"], 7, 2],
               "Select1425": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1426": ["Select", ["Fuzzify1352"], 7, 3],
               "Select1444": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1445": ["Select", ["Fuzzify1352"], 7, 4],
               "Select1463": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1464": ["Select", ["Fuzzify1352"], 7, 5],
               "Select1482": ["Select", ["Fuzzify1351"], 7, 0],
               "Select1483": ["Select", ["Fuzzify1352"], 7, 6],
               "Select1501": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1502": ["Select", ["Fuzzify1352"], 7, 0],
               "Select1520": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1521": ["Select", ["Fuzzify1352"], 7, 1],
               "Select1539": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1540": ["Select", ["Fuzzify1352"], 7, 2],
               "Select1558": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1559": ["Select", ["Fuzzify1352"], 7, 3],
               "Select1577": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1578": ["Select", ["Fuzzify1352"], 7, 4],
               "Select1596": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1597": ["Select", ["Fuzzify1352"], 7, 5],
               "Select1615": ["Select", ["Fuzzify1351"], 7, 1],
               "Select1616": ["Select", ["Fuzzify1352"], 7, 6],
               "Select1634": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1635": ["Select", ["Fuzzify1352"], 7, 0],
               "Select1653": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1654": ["Select", ["Fuzzify1352"], 7, 1],
               "Select1672": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1673": ["Select", ["Fuzzify1352"], 7, 2],
               "Select1691": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1692": ["Select", ["Fuzzify1352"], 7, 3],
               "Select1710": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1711": ["Select", ["Fuzzify1352"], 7, 4],
               "Select1729": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1730": ["Select", ["Fuzzify1352"], 7, 5],
               "Select1748": ["Select", ["Fuzzify1351"], 7, 2],
               "Select1749": ["Select", ["Fuzzify1352"], 7, 6],
               "Select1767": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1768": ["Select", ["Fuzzify1352"], 7, 0],
               "Select1786": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1787": ["Select", ["Fuzzify1352"], 7, 1],
               "Select1805": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1806": ["Select", ["Fuzzify1352"], 7, 2],
               "Select1824": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1825": ["Select", ["Fuzzify1352"], 7, 3],
               "Select1843": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1844": ["Select", ["Fuzzify1352"], 7, 4],
               "Select1862": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1863": ["Select", ["Fuzzify1352"], 7, 5],
               "Select1881": ["Select", ["Fuzzify1351"], 7, 3],
               "Select1882": ["Select", ["Fuzzify1352"], 7, 6],
               "Select1900": ["Select", ["Fuzzify1351"], 7, 4],
               "Select1901": ["Select", ["Fuzzify1352"], 7, 0],
               "Select1919": ["Select", ["Fuzzify1351"], 7, 4],
               "Select1920": ["Select", ["Fuzzify1352"], 7, 1],
               "Select1938": ["Select", ["Fuzzify1351"], 7, 4],
               "Select1939": ["Select", ["Fuzzify1352"], 7, 2],
               "Select1957": ["Select", ["Fuzzify1351"], 7, 4],
               "Select1958": ["Select", ["Fuzzify1352"], 7, 3],
               "Select1976": ["Select", ["Fuzzify1351"], 7, 4],
               "Select1977": ["Select", ["Fuzzify1352"], 7, 4],
               "Select1995": ["Select", ["Fuzzify1351"], 7, 4],
               "Select1996": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2014": ["Select", ["Fuzzify1351"], 7, 4],
               "Select2015": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2033": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2034": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2052": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2053": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2071": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2072": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2090": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2091": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2109": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2110": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2128": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2129": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2147": ["Select", ["Fuzzify1351"], 7, 5],
               "Select2148": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2166": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2167": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2185": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2186": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2204": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2205": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2223": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2224": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2242": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2243": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2261": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2262": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2280": ["Select", ["Fuzzify1351"], 7, 6],
               "Select2281": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2335": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2336": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2340": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2341": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2345": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2346": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2350": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2351": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2355": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2356": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2360": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2361": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2365": ["Select", ["Fuzzify2334"], 7, 0],
               "Select2366": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2370": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2371": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2375": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2376": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2380": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2381": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2385": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2386": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2390": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2391": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2395": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2396": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2400": ["Select", ["Fuzzify2334"], 7, 1],
               "Select2401": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2405": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2406": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2410": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2411": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2415": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2416": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2420": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2421": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2425": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2426": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2430": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2431": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2435": ["Select", ["Fuzzify2334"], 7, 2],
               "Select2436": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2440": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2441": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2445": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2446": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2450": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2451": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2455": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2456": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2460": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2461": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2465": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2466": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2470": ["Select", ["Fuzzify2334"], 7, 3],
               "Select2471": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2475": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2476": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2480": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2481": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2485": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2486": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2490": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2491": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2495": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2496": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2500": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2501": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2505": ["Select", ["Fuzzify2334"], 7, 4],
               "Select2506": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2510": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2511": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2515": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2516": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2520": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2521": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2525": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2526": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2530": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2531": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2535": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2536": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2540": ["Select", ["Fuzzify2334"], 7, 5],
               "Select2541": ["Select", ["Fuzzify1352"], 7, 6],
               "Select2545": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2546": ["Select", ["Fuzzify1352"], 7, 0],
               "Select2550": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2551": ["Select", ["Fuzzify1352"], 7, 1],
               "Select2555": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2556": ["Select", ["Fuzzify1352"], 7, 2],
               "Select2560": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2561": ["Select", ["Fuzzify1352"], 7, 3],
               "Select2565": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2566": ["Select", ["Fuzzify1352"], 7, 4],
               "Select2570": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2571": ["Select", ["Fuzzify1352"], 7, 5],
               "Select2575": ["Select", ["Fuzzify2334"], 7, 6],
               "Select2576": ["Select", ["Fuzzify1352"], 7, 6]}}