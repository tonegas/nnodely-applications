{"Constants": {"Constant14": {"dim": 1, "values": [-17.478992462158203]},
               "Constant15": {"dim": 1, "values": [17.478992462158203]},
               "Constant19": {"dim": 1, "values": [-0.06789737194776535]},
               "Constant20": {"dim": 1, "values": [0.06789737194776535]},
               "Constant24": {"dim": 1, "values": [-16.80176544189453]},
               "Constant25": {"dim": 1, "values": [8.896745681762695]},
               "Constant9": {"dim": 1, "values": [63.58073043823242]},
               "L": {"dim": 1, "values": [3.115000009536743]},
               "ax_center_0": {"dim": 1, "values": [-20.613428115844727]},
               "ax_center_1": {"dim": 1, "values": [0.0]},
               "ax_center_2": {"dim": 1, "values": [9.385254859924316]},
               "ay_center_0": {"dim": 1, "values": [0.0]},
               "ay_center_1": {"dim": 1, "values": [4.546991348266602]},
               "ay_center_2": {"dim": 1, "values": [9.093982696533203]},
               "ay_center_3": {"dim": 1, "values": [13.640974044799805]},
               "ay_center_4": {"dim": 1, "values": [18.187965393066406]}},
 "Functions": {"FFuzzify32": {"centers": [0.0,
                                          4.546991431123925,
                                          9.09398286224785,
                                          13.640974293371777,
                                          18.1879657244957],
                              "dim_out": {"dim": 5},
                              "functions": "Triangular",
                              "names": "Triangular"},
               "FFuzzify33": {"centers": [-20.6134272365284,
                                          0.0,
                                          9.385254469609816],
                              "dim_out": {"dim": 3},
                              "functions": "Triangular",
                              "names": "Triangular"},
               "FFuzzify62": {"centers": [12.3699633005119,
                                          37.97534616139815,
                                          63.5807290222844],
                              "dim_out": {"dim": 3},
                              "functions": "Triangular",
                              "names": "Triangular"},
               "FParamFun11": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 10},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "params_and_consts": []},
               "FParamFun16": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 10},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "params_and_consts": []},
               "FParamFun21": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 10},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "params_and_consts": []},
               "FParamFun31": {"code": "def abs_fun(x):\n  return torch.abs(x)\n",
                               "in_dim": [{"dim": 1, "sw": 10}],
                               "map_over_dim": false,
                               "n_input": 1,
                               "name": "abs_fun",
                               "params_and_consts": []},
               "FParamFun60": {"code": "def handling_diagr_local(curv,ay,ax,vx_norm,  # inputs\n                         ay_0,ax_0,L,       # constants\n                         k1_vx,k2_vx,            # learnable arrays of parameters\n                         S_ay,S_ax          # learnable arrays of parameters\n                         ):\n  sign_ay = torch.sign(ay)  # sign of the lateral acceleration\n\n  # compute k1, as a function of vx \n  k1_vx_fun = k1_vx[0,0,0]\n  for ii in range(1,k1_vx.size(2)):\n    k1_vx_fun = k1_vx_fun + k1_vx[0,0,ii]*torch.pow(vx_norm,ii)\n\n  # compute k2, as a function of vx\n  k2_vx_fun = k2_vx[0,0,0]\n  for ii in range(1,k2_vx.size(2)):\n    k2_vx_fun = k2_vx_fun + k2_vx[0,0,ii]*torch.pow(vx_norm,ii)\n\n  # learnable weights of the local model for ay around ay_0\n  S_ay_1 = S_ay[0,0,0]\n  S_ay_2 = S_ay[0,0,1]\n  S_ay_3 = S_ay[0,0,2]\n  S_ay_4 = S_ay[0,0,3]\n\n  # learnable weights of the local model for ax around ax_0\n  S_ax_1 = S_ax[0,0,0]\n  S_ax_2 = S_ax[0,0,1]\n  S_ax_3 = S_ax[0,0,2]\n  S_ax_4 = S_ax[0,0,3]\n  S_ax_5 = S_ax[0,0,4]\n\n  # output of the local model of the handling diagram\n  output = curv*L + k1_vx_fun*sign_ay + k2_vx_fun*(ay - ay_0*sign_ay) +\\\n           S_ay_1*S_ax_1*(ay - (ay_0+S_ay_2)*sign_ay)*(S_ax_2 + ax - ax_0)*(1 + \\\n           S_ay_3*(ay - ay_0*sign_ay) + S_ax_3*(ax - ax_0) + S_ax_4*(ax - ax_0)**2 + \\\n           S_ay_4*S_ax_5*(ay - ay_0*sign_ay)*(ax - ax_0))\n  return output\n",
                               "in_dim": [{"dim": 1, "sw": 10},
                                          {"dim": 1, "sw": 10},
                                          {"dim": 1, "sw": 10},
                                          {"dim": 1, "sw": 10},
                                          {"dim": 1},
                                          {"dim": 1},
                                          {"dim": 1},
                                          {"dim": [1, 1, 4]},
                                          {"dim": [1, 1, 2]},
                                          {"dim": [1, 1, 4]},
                                          {"dim": [1, 1, 5]}],
                               "map_over_dim": false,
                               "n_input": 11,
                               "name": "handling_diagr_local",
                               "params_and_consts": []},
               "FParamFun7": {"code": "def normalize_fun(x,x_max):\n  return x/x_max\n",
                              "in_dim": [{"dim": 1, "sw": 10}, {"dim": 1}],
                              "map_over_dim": false,
                              "n_input": 2,
                              "name": "normalize_fun",
                              "params_and_consts": []}},
 "Info": {"SampleTime": 1,
          "nnodely_version": "1.5.1",
          "ns": [0, 10],
          "ntot": 10,
          "num_parameters": 155},
 "Inputs": {"ax": {"dim": 1, "ns": [0, 10], "ntot": 10, "sw": [0, 10]},
            "ay": {"dim": 1, "ns": [0, 10], "ntot": 10, "sw": [0, 10]},
            "curv": {"dim": 1, "ns": [0, 10], "ntot": 10, "sw": [0, 10]},
            "steer_target": {"dim": 1, "ns": [0, 1], "ntot": 1, "sw": [0, 1]},
            "vx": {"dim": 1, "ns": [0, 10], "ntot": 10, "sw": [0, 10]}},
 "Minimizers": {"steer_error": {"A": "SamplePart395",
                                "B": "Add393",
                                "loss": "rmse"}},
 "Models": "steer_ctrl",
 "Outputs": {"steering_angle": "Add393"},
 "Parameters": {"PFir64W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.06009993702173233],
                                       [0.05812520533800125],
                                       [0.04871972277760506],
                                       [0.040889255702495575],
                                       [0.030550144612789154],
                                       [0.02495523728430271],
                                       [0.01664630137383938],
                                       [0.003406314644962549],
                                       [-0.0036721392534673214],
                                       [-0.015200387686491013]]},
                "PFir66W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.1025625690817833],
                                       [0.10039512813091278],
                                       [0.09611731767654419],
                                       [0.09134144335985184],
                                       [0.0872354507446289],
                                       [0.08304878324270248],
                                       [0.07782186567783356],
                                       [0.07370186597108841],
                                       [0.0698624700307846],
                                       [0.06474315375089645]]},
                "PFir68W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.12302837520837784],
                                       [0.12680478394031525],
                                       [0.11608214676380157],
                                       [0.11247637867927551],
                                       [0.10700202733278275],
                                       [0.10705582052469254],
                                       [0.10670705139636993],
                                       [0.1053757593035698],
                                       [0.09859151393175125],
                                       [0.09748654067516327]]},
                "PFir70W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[-0.02742685191333294],
                                       [-0.015988608822226524],
                                       [-0.010939945466816425],
                                       [-0.0010972677264362574],
                                       [0.0025719571858644485],
                                       [0.010053498670458794],
                                       [0.011593290604650974],
                                       [0.011967201717197895],
                                       [0.02060731127858162],
                                       [0.020134201273322105]]},
                "PFir72W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.040836188942193985],
                                       [0.042485643178224564],
                                       [0.03534931689500809],
                                       [0.032671745866537094],
                                       [0.02947806939482689],
                                       [0.02779936045408249],
                                       [0.024138618260622025],
                                       [0.022759243845939636],
                                       [0.02291039749979973],
                                       [0.021475179120898247]]},
                "PFir74W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.040800001472234726],
                                       [0.05124516785144806],
                                       [0.03513215854763985],
                                       [0.03014218993484974],
                                       [0.025859802961349487],
                                       [0.021057870239019394],
                                       [0.010361597873270512],
                                       [0.011146283708512783],
                                       [0.008257505483925343],
                                       [0.00445482786744833]]},
                "PFir76W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.031756117939949036],
                                       [0.025674067437648773],
                                       [0.02191491611301899],
                                       [0.023650171235203743],
                                       [0.021096406504511833],
                                       [0.01809081993997097],
                                       [0.010990999639034271],
                                       [0.006690172478556633],
                                       [0.007432655431330204],
                                       [0.003634170861914754]]},
                "PFir78W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.01880674809217453],
                                       [0.01607825979590416],
                                       [0.014426438137888908],
                                       [0.0167416762560606],
                                       [0.016168668866157532],
                                       [0.013875721953809261],
                                       [0.009574179537594318],
                                       [0.008589891716837883],
                                       [0.008855527266860008],
                                       [0.007571227848529816]]},
                "PFir80W": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    '''\n    Initializes parameters using an increasing or decreasing exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'max_value': 1, 'lambda': 3, 'monotonicity': 'decreasing'}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            max_value : int or float\n                The maximum value of the exponential function.\n            lambda : int or float\n                The rate parameter of the exponential function.\n            monotonicity : str\n                The monotonicity of the exponential function. Can be 'increasing' or 'decreasing'.\n\n    Raises\n    ------\n    ValueError\n        If the monotonicity is not 'increasing' or 'decreasing'.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.00016243453636632417,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 10,
                            "values": [[0.0034008703660219908],
                                       [0.01029408909380436],
                                       [0.006793478969484568],
                                       [0.006899582222104073],
                                       [0.005491568241268396],
                                       [0.004249179735779762],
                                       [0.005614759400486946],
                                       [0.007321208715438843],
                                       [0.007134671788662672],
                                       [0.003951968625187874]]},
                "S_ax_0": {"dim": [1, 1, 5],
                           "init_values": [[[0.0011447237338870764,
                                             0.0009015907417051494,
                                             0.0005024943384341896,
                                             0.0009008559281937778,
                                             -0.0006837278488092124]]],
                           "values": [[[-0.0168995913118124,
                                        -0.007960984483361244,
                                        0.005718422122299671,
                                        0.015240175649523735,
                                        0.0984082967042923]]]},
                "S_ax_1": {"dim": [1, 1, 5],
                           "init_values": [[[-0.0001228902256116271,
                                             -0.0009357694070786238,
                                             -0.0002678880700841546,
                                             0.0005303554935380816,
                                             -0.0006916607380844653]]],
                           "values": [[[0.05089820921421051,
                                        -0.024919092655181885,
                                        -0.126506507396698,
                                        -0.05471676215529442,
                                        0.09051267057657242]]]},
                "S_ax_2": {"dim": [1, 1, 5],
                           "init_values": [[[-0.00039675351581536233,
                                             -0.0006871726945973933,
                                             -0.0008452056208625436,
                                             -0.000671246147248894,
                                             -1.2664599125855602e-05]]],
                           "values": [[[-0.06614144891500473,
                                        0.00022694567451253533,
                                        -0.026846708729863167,
                                        0.08916779607534409,
                                        0.21655622124671936]]]},
                "S_ay_0": {"dim": [1, 1, 4],
                           "init_values": [[[-6.117564043961465e-05,
                                             -5.281717676552944e-05,
                                             -0.00010729685891419649,
                                             8.654076373204589e-05]]],
                           "values": [[[0.04569454491138458,
                                        -0.07077842950820923,
                                        0.02329060435295105,
                                        -0.2082398384809494]]]},
                "S_ay_1": {"dim": [1, 1, 4],
                           "init_values": [[[-0.00023015386250335723,
                                             0.0001744811743265018,
                                             -7.612069020979106e-05,
                                             3.190390998497605e-05]]],
                           "values": [[[0.04445149004459381,
                                        -0.09190928190946579,
                                        -0.07733015716075897,
                                        -0.13485339283943176]]]},
                "S_ay_2": {"dim": [1, 1, 4],
                           "init_values": [[[-2.4937036869232543e-05,
                                             0.00014621079026255757,
                                             -0.0002060140686808154,
                                             -3.224172178306617e-05]]],
                           "values": [[[0.006968867965042591,
                                        -0.0639096200466156,
                                        -0.0044080172665417194,
                                        -0.09448282420635223]]]},
                "S_ay_3": {"dim": [1, 1, 4],
                           "init_values": [[[-3.840543649857864e-05,
                                             0.00011337694741087034,
                                             -0.00010998912330251187,
                                             -1.7242820831597783e-05]]],
                           "values": [[[-0.005753306671977043,
                                        0.03608866408467293,
                                        0.09699385613203049,
                                        -0.002227918477728963]]]},
                "S_ay_4": {"dim": [1, 1, 4],
                           "init_values": [[[-8.778584015090019e-05,
                                             4.221374638291309e-06,
                                             5.828152279718779e-05,
                                             -0.00011006191925844178]]],
                           "values": [[[-0.03959928825497627,
                                        0.030548227950930595,
                                        -0.004860233049839735,
                                        0.011349978856742382]]]},
                "k1_vx_0": {"dim": [1, 1, 4],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.0016650129109621048,
                                         -0.006669993977993727,
                                         0.0022637711372226477,
                                         -0.003347306977957487]]]},
                "k1_vx_1": {"dim": [1, 1, 4],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.04068674519658089,
                                         -0.029470443725585938,
                                         -0.012257125228643417,
                                         0.03142903372645378]]]},
                "k1_vx_2": {"dim": [1, 1, 4],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.05104130133986473,
                                         -0.015993621200323105,
                                         -0.013695749454200268,
                                         0.01687186397612095]]]},
                "k1_vx_3": {"dim": [1, 1, 4],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.049284677952528,
                                         0.021461376920342445,
                                         0.02329413779079914,
                                         0.03205785155296326]]]},
                "k1_vx_4": {"dim": [1, 1, 4],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.061345070600509644,
                                         0.041545215994119644,
                                         0.015899134799838066,
                                         -0.01519088726490736]]]},
                "k2_vx_0": {"dim": [1, 1, 2],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.026266999542713165,
                                         -0.008328823372721672]]]},
                "k2_vx_1": {"dim": [1, 1, 2],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.027291228994727135,
                                         -0.021155478432774544]]]},
                "k2_vx_2": {"dim": [1, 1, 2],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[0.01430171076208353,
                                         -0.0008565665339119732]]]},
                "k2_vx_3": {"dim": [1, 1, 2],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[-0.008774328045547009,
                                         0.013728045858442783]]]},
                "k2_vx_4": {"dim": [1, 1, 2],
                            "init_values": [[[9.999999747378752e-06,
                                              9.999999747378752e-06]]],
                            "values": [[[-0.020855462178587914,
                                         -0.003954862244427204]]]}},
 "Relations": {"Add324": ["Add", ["Mul57", "Mul76"]],
               "Add325": ["Add", ["Add324", "Mul95"]],
               "Add326": ["Add", ["Add325", "Mul114"]],
               "Add327": ["Add", ["Add326", "Mul133"]],
               "Add328": ["Add", ["Add327", "Mul152"]],
               "Add329": ["Add", ["Add328", "Mul171"]],
               "Add330": ["Add", ["Add329", "Mul190"]],
               "Add331": ["Add", ["Add330", "Mul209"]],
               "Add332": ["Add", ["Add331", "Mul228"]],
               "Add333": ["Add", ["Add332", "Mul247"]],
               "Add334": ["Add", ["Add333", "Mul266"]],
               "Add335": ["Add", ["Add334", "Mul285"]],
               "Add336": ["Add", ["Add335", "Mul304"]],
               "Add337": ["Add", ["Add336", "Mul323"]],
               "Add386": ["Add", ["Fir345", "Fir350"]],
               "Add387": ["Add", ["Add386", "Fir355"]],
               "Add388": ["Add", ["Add387", "Fir360"]],
               "Add389": ["Add", ["Add388", "Fir365"]],
               "Add390": ["Add", ["Add389", "Fir370"]],
               "Add391": ["Add", ["Add390", "Fir375"]],
               "Add392": ["Add", ["Add391", "Fir380"]],
               "Add393": ["Add", ["Add392", "Fir385"]],
               "Fir345": ["Fir", ["Mul344"], "PFir64W", null, 0],
               "Fir350": ["Fir", ["Mul349"], "PFir66W", null, 0],
               "Fir355": ["Fir", ["Mul354"], "PFir68W", null, 0],
               "Fir360": ["Fir", ["Mul359"], "PFir70W", null, 0],
               "Fir365": ["Fir", ["Mul364"], "PFir72W", null, 0],
               "Fir370": ["Fir", ["Mul369"], "PFir74W", null, 0],
               "Fir375": ["Fir", ["Mul374"], "PFir76W", null, 0],
               "Fir380": ["Fir", ["Mul379"], "PFir78W", null, 0],
               "Fir385": ["Fir", ["Mul384"], "PFir80W", null, 0],
               "Fuzzify340": ["Fuzzify", ["SamplePart339"], "FFuzzify62"],
               "Fuzzify37": ["Fuzzify", ["ParamFun36"], "FFuzzify32"],
               "Fuzzify38": ["Fuzzify", ["ParamFun24"], "FFuzzify33"],
               "Mul113": ["Mul", ["Select111", "Select112"]],
               "Mul114": ["Mul", ["ParamFun96", "Mul113"]],
               "Mul132": ["Mul", ["Select130", "Select131"]],
               "Mul133": ["Mul", ["ParamFun115", "Mul132"]],
               "Mul151": ["Mul", ["Select149", "Select150"]],
               "Mul152": ["Mul", ["ParamFun134", "Mul151"]],
               "Mul170": ["Mul", ["Select168", "Select169"]],
               "Mul171": ["Mul", ["ParamFun153", "Mul170"]],
               "Mul189": ["Mul", ["Select187", "Select188"]],
               "Mul190": ["Mul", ["ParamFun172", "Mul189"]],
               "Mul208": ["Mul", ["Select206", "Select207"]],
               "Mul209": ["Mul", ["ParamFun191", "Mul208"]],
               "Mul227": ["Mul", ["Select225", "Select226"]],
               "Mul228": ["Mul", ["ParamFun210", "Mul227"]],
               "Mul246": ["Mul", ["Select244", "Select245"]],
               "Mul247": ["Mul", ["ParamFun229", "Mul246"]],
               "Mul265": ["Mul", ["Select263", "Select264"]],
               "Mul266": ["Mul", ["ParamFun248", "Mul265"]],
               "Mul284": ["Mul", ["Select282", "Select283"]],
               "Mul285": ["Mul", ["ParamFun267", "Mul284"]],
               "Mul303": ["Mul", ["Select301", "Select302"]],
               "Mul304": ["Mul", ["ParamFun286", "Mul303"]],
               "Mul322": ["Mul", ["Select320", "Select321"]],
               "Mul323": ["Mul", ["ParamFun305", "Mul322"]],
               "Mul343": ["Mul", ["Select341", "Select342"]],
               "Mul344": ["Mul", ["Add337", "Mul343"]],
               "Mul348": ["Mul", ["Select346", "Select347"]],
               "Mul349": ["Mul", ["Add337", "Mul348"]],
               "Mul353": ["Mul", ["Select351", "Select352"]],
               "Mul354": ["Mul", ["Add337", "Mul353"]],
               "Mul358": ["Mul", ["Select356", "Select357"]],
               "Mul359": ["Mul", ["Add337", "Mul358"]],
               "Mul363": ["Mul", ["Select361", "Select362"]],
               "Mul364": ["Mul", ["Add337", "Mul363"]],
               "Mul368": ["Mul", ["Select366", "Select367"]],
               "Mul369": ["Mul", ["Add337", "Mul368"]],
               "Mul373": ["Mul", ["Select371", "Select372"]],
               "Mul374": ["Mul", ["Add337", "Mul373"]],
               "Mul378": ["Mul", ["Select376", "Select377"]],
               "Mul379": ["Mul", ["Add337", "Mul378"]],
               "Mul383": ["Mul", ["Select381", "Select382"]],
               "Mul384": ["Mul", ["Add337", "Mul383"]],
               "Mul56": ["Mul", ["Select54", "Select55"]],
               "Mul57": ["Mul", ["ParamFun39", "Mul56"]],
               "Mul75": ["Mul", ["Select73", "Select74"]],
               "Mul76": ["Mul", ["ParamFun58", "Mul75"]],
               "Mul94": ["Mul", ["Select92", "Select93"]],
               "Mul95": ["Mul", ["ParamFun77", "Mul94"]],
               "ParamFun10": ["ParamFun",
                              ["SamplePart9", "Constant14", "Constant15"],
                              "FParamFun11"],
               "ParamFun115": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_1",
                                "ax_center_1",
                                "L",
                                "k1_vx_1",
                                "k2_vx_1",
                                "S_ay_1",
                                "S_ax_1"],
                               "FParamFun60"],
               "ParamFun134": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_1",
                                "ax_center_2",
                                "L",
                                "k1_vx_1",
                                "k2_vx_1",
                                "S_ay_1",
                                "S_ax_2"],
                               "FParamFun60"],
               "ParamFun153": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_2",
                                "ax_center_0",
                                "L",
                                "k1_vx_2",
                                "k2_vx_2",
                                "S_ay_2",
                                "S_ax_0"],
                               "FParamFun60"],
               "ParamFun17": ["ParamFun",
                              ["SamplePart16", "Constant19", "Constant20"],
                              "FParamFun16"],
               "ParamFun172": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_2",
                                "ax_center_1",
                                "L",
                                "k1_vx_2",
                                "k2_vx_2",
                                "S_ay_2",
                                "S_ax_1"],
                               "FParamFun60"],
               "ParamFun191": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_2",
                                "ax_center_2",
                                "L",
                                "k1_vx_2",
                                "k2_vx_2",
                                "S_ay_2",
                                "S_ax_2"],
                               "FParamFun60"],
               "ParamFun2": ["ParamFun",
                             ["SamplePart1", "Constant9"],
                             "FParamFun7"],
               "ParamFun210": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_3",
                                "ax_center_0",
                                "L",
                                "k1_vx_3",
                                "k2_vx_3",
                                "S_ay_3",
                                "S_ax_0"],
                               "FParamFun60"],
               "ParamFun229": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_3",
                                "ax_center_1",
                                "L",
                                "k1_vx_3",
                                "k2_vx_3",
                                "S_ay_3",
                                "S_ax_1"],
                               "FParamFun60"],
               "ParamFun24": ["ParamFun",
                              ["SamplePart23", "Constant24", "Constant25"],
                              "FParamFun21"],
               "ParamFun248": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_3",
                                "ax_center_2",
                                "L",
                                "k1_vx_3",
                                "k2_vx_3",
                                "S_ay_3",
                                "S_ax_2"],
                               "FParamFun60"],
               "ParamFun267": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_4",
                                "ax_center_0",
                                "L",
                                "k1_vx_4",
                                "k2_vx_4",
                                "S_ay_4",
                                "S_ax_0"],
                               "FParamFun60"],
               "ParamFun286": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_4",
                                "ax_center_1",
                                "L",
                                "k1_vx_4",
                                "k2_vx_4",
                                "S_ay_4",
                                "S_ax_1"],
                               "FParamFun60"],
               "ParamFun305": ["ParamFun",
                               ["ParamFun17",
                                "ParamFun10",
                                "ParamFun24",
                                "ParamFun2",
                                "ay_center_4",
                                "ax_center_2",
                                "L",
                                "k1_vx_4",
                                "k2_vx_4",
                                "S_ay_4",
                                "S_ax_2"],
                               "FParamFun60"],
               "ParamFun36": ["ParamFun", ["ParamFun10"], "FParamFun31"],
               "ParamFun39": ["ParamFun",
                              ["ParamFun17",
                               "ParamFun10",
                               "ParamFun24",
                               "ParamFun2",
                               "ay_center_0",
                               "ax_center_0",
                               "L",
                               "k1_vx_0",
                               "k2_vx_0",
                               "S_ay_0",
                               "S_ax_0"],
                              "FParamFun60"],
               "ParamFun58": ["ParamFun",
                              ["ParamFun17",
                               "ParamFun10",
                               "ParamFun24",
                               "ParamFun2",
                               "ay_center_0",
                               "ax_center_1",
                               "L",
                               "k1_vx_0",
                               "k2_vx_0",
                               "S_ay_0",
                               "S_ax_1"],
                              "FParamFun60"],
               "ParamFun77": ["ParamFun",
                              ["ParamFun17",
                               "ParamFun10",
                               "ParamFun24",
                               "ParamFun2",
                               "ay_center_0",
                               "ax_center_2",
                               "L",
                               "k1_vx_0",
                               "k2_vx_0",
                               "S_ay_0",
                               "S_ax_2"],
                              "FParamFun60"],
               "ParamFun96": ["ParamFun",
                              ["ParamFun17",
                               "ParamFun10",
                               "ParamFun24",
                               "ParamFun2",
                               "ay_center_1",
                               "ax_center_0",
                               "L",
                               "k1_vx_1",
                               "k2_vx_1",
                               "S_ay_1",
                               "S_ax_0"],
                              "FParamFun60"],
               "SamplePart1": ["SamplePart", ["vx"], -1, [0, 10]],
               "SamplePart16": ["SamplePart", ["curv"], -1, [0, 10]],
               "SamplePart23": ["SamplePart", ["ax"], -1, [0, 10]],
               "SamplePart339": ["SamplePart", ["vx"], -1, [0, 10]],
               "SamplePart395": ["SamplePart", ["steer_target"], -1, [0, 1]],
               "SamplePart9": ["SamplePart", ["ay"], -1, [0, 10]],
               "Select111": ["Select", ["Fuzzify37"], 5, 1],
               "Select112": ["Select", ["Fuzzify38"], 3, 0],
               "Select130": ["Select", ["Fuzzify37"], 5, 1],
               "Select131": ["Select", ["Fuzzify38"], 3, 1],
               "Select149": ["Select", ["Fuzzify37"], 5, 1],
               "Select150": ["Select", ["Fuzzify38"], 3, 2],
               "Select168": ["Select", ["Fuzzify37"], 5, 2],
               "Select169": ["Select", ["Fuzzify38"], 3, 0],
               "Select187": ["Select", ["Fuzzify37"], 5, 2],
               "Select188": ["Select", ["Fuzzify38"], 3, 1],
               "Select206": ["Select", ["Fuzzify37"], 5, 2],
               "Select207": ["Select", ["Fuzzify38"], 3, 2],
               "Select225": ["Select", ["Fuzzify37"], 5, 3],
               "Select226": ["Select", ["Fuzzify38"], 3, 0],
               "Select244": ["Select", ["Fuzzify37"], 5, 3],
               "Select245": ["Select", ["Fuzzify38"], 3, 1],
               "Select263": ["Select", ["Fuzzify37"], 5, 3],
               "Select264": ["Select", ["Fuzzify38"], 3, 2],
               "Select282": ["Select", ["Fuzzify37"], 5, 4],
               "Select283": ["Select", ["Fuzzify38"], 3, 0],
               "Select301": ["Select", ["Fuzzify37"], 5, 4],
               "Select302": ["Select", ["Fuzzify38"], 3, 1],
               "Select320": ["Select", ["Fuzzify37"], 5, 4],
               "Select321": ["Select", ["Fuzzify38"], 3, 2],
               "Select341": ["Select", ["Fuzzify340"], 3, 0],
               "Select342": ["Select", ["Fuzzify38"], 3, 0],
               "Select346": ["Select", ["Fuzzify340"], 3, 0],
               "Select347": ["Select", ["Fuzzify38"], 3, 1],
               "Select351": ["Select", ["Fuzzify340"], 3, 0],
               "Select352": ["Select", ["Fuzzify38"], 3, 2],
               "Select356": ["Select", ["Fuzzify340"], 3, 1],
               "Select357": ["Select", ["Fuzzify38"], 3, 0],
               "Select361": ["Select", ["Fuzzify340"], 3, 1],
               "Select362": ["Select", ["Fuzzify38"], 3, 1],
               "Select366": ["Select", ["Fuzzify340"], 3, 1],
               "Select367": ["Select", ["Fuzzify38"], 3, 2],
               "Select371": ["Select", ["Fuzzify340"], 3, 2],
               "Select372": ["Select", ["Fuzzify38"], 3, 0],
               "Select376": ["Select", ["Fuzzify340"], 3, 2],
               "Select377": ["Select", ["Fuzzify38"], 3, 1],
               "Select381": ["Select", ["Fuzzify340"], 3, 2],
               "Select382": ["Select", ["Fuzzify38"], 3, 2],
               "Select54": ["Select", ["Fuzzify37"], 5, 0],
               "Select55": ["Select", ["Fuzzify38"], 3, 0],
               "Select73": ["Select", ["Fuzzify37"], 5, 0],
               "Select74": ["Select", ["Fuzzify38"], 3, 1],
               "Select92": ["Select", ["Fuzzify37"], 5, 0],
               "Select93": ["Select", ["Fuzzify38"], 3, 2]}}