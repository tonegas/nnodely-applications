{"Constants": {"Constant7": {"dim": 1, "values": [2.0]}},
 "Functions": {"FParamFun8": {"code": "def acc_pos(T):\n    mask_pos = torch.gt(T,0)\n    return torch.mul(T,mask_pos)\n",
                              "in_dim": [{"dim": 1, "sw": 15}],
                              "map_over_dim": false,
                              "n_input": 1,
                              "name": "acc_pos",
                              "params_and_consts": []},
               "FParamFun9": {"code": "def acc_neg(T):\n    mask_pos = torch.gt(T,0)\n    return torch.mul(T,~mask_pos)\n",
                              "in_dim": [{"dim": 1, "sw": 15}],
                              "map_over_dim": false,
                              "n_input": 1,
                              "name": "acc_neg",
                              "params_and_consts": []}},
 "Info": {"SampleTime": 1,
          "nnodely_version": "1.5.1",
          "ns": [15, 1],
          "ntot": 16,
          "num_parameters": 34},
 "Inputs": {"acc": {"dim": 1, "ns": [0, 1], "ntot": 1, "sw": [0, 1]},
            "trq": {"dim": 1, "ns": [15, 0], "ntot": 15, "sw": [-15, 0]},
            "vel": {"dim": 1, "ns": [1, 0], "ntot": 1, "sw": [-1, 0]}},
 "Minimizers": {"acc_error": {"A": "SamplePart16",
                              "B": "Add14",
                              "loss": "rmse"}},
 "Models": "acc",
 "Outputs": {"acceleration": "Add14"},
 "Parameters": {"PFir10W": {"dim": 1,
                            "init_fun": {"code": "def init_negexp(indexes, params_size, dict_param = {'size_index':0, 'first_value':1, 'lambda':3}):\n    '''\n    Initializes parameters using a negative decay exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'first_value': 1, 'lambda': 3}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            first_value : int or float\n                The value at the start of the range.\n            lambda : int or float\n                The decay rate parameter of the exponential function.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    # check if the size of the list of parameters is 1, to avoid a division by zero\n    x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n    return dict_param['first_value']*np.exp(-dict_param['lambda']*(1-x))\n",
                                         "name": "init_negexp",
                                         "params": {"first_value": 0.0001,
                                                    "lambda": 3,
                                                    "size_index": 0}},
                            "sw": 15,
                            "values": [[-0.007056019268929958],
                                       [0.022701583802700043],
                                       [0.030061334371566772],
                                       [0.007915339432656765],
                                       [-0.03634724020957947],
                                       [-0.048434000462293625],
                                       [-0.00983369443565607],
                                       [-0.029975615441799164],
                                       [-0.01887623593211174],
                                       [0.08526770025491714],
                                       [0.06935026496648788],
                                       [-0.0542009137570858],
                                       [-0.07643815129995346],
                                       [0.19523298740386963],
                                       [0.6104181408882141]]},
                "PFir10b": {"dim": 1,
                            "init_fun": {"code": "def init_negexp(indexes, params_size, dict_param = {'size_index':0, 'first_value':1, 'lambda':3}):\n    '''\n    Initializes parameters using a negative decay exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'first_value': 1, 'lambda': 3}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            first_value : int or float\n                The value at the start of the range.\n            lambda : int or float\n                The decay rate parameter of the exponential function.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    # check if the size of the list of parameters is 1, to avoid a division by zero\n    x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n    return dict_param['first_value']*np.exp(-dict_param['lambda']*(1-x))\n",
                                         "name": "init_negexp",
                                         "params": {"first_value": 0.0001,
                                                    "lambda": 3,
                                                    "size_index": 0}},
                            "values": [-0.3053950369358063]},
                "PFir13W": {"dim": 1,
                            "init_fun": {"code": "def init_negexp(indexes, params_size, dict_param = {'size_index':0, 'first_value':1, 'lambda':3}):\n    '''\n    Initializes parameters using a negative decay exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'first_value': 1, 'lambda': 3}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            first_value : int or float\n                The value at the start of the range.\n            lambda : int or float\n                The decay rate parameter of the exponential function.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    # check if the size of the list of parameters is 1, to avoid a division by zero\n    x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n    return dict_param['first_value']*np.exp(-dict_param['lambda']*(1-x))\n",
                                         "name": "init_negexp",
                                         "params": {"first_value": 0.0001,
                                                    "lambda": 3,
                                                    "size_index": 0}},
                            "sw": 15,
                            "values": [[0.005393414758145809],
                                       [0.15908412635326385],
                                       [-0.13285709917545319],
                                       [0.07087964564561844],
                                       [0.01967625878751278],
                                       [0.07895468175411224],
                                       [0.21369533240795135],
                                       [0.09511051326990128],
                                       [0.18438783288002014],
                                       [0.15781201422214508],
                                       [0.05203666538000107],
                                       [0.14464201033115387],
                                       [0.035773131996393204],
                                       [0.29830294847488403],
                                       [1.4618667364120483]]},
                "PFir13b": {"dim": 1,
                            "init_fun": {"code": "def init_negexp(indexes, params_size, dict_param = {'size_index':0, 'first_value':1, 'lambda':3}):\n    '''\n    Initializes parameters using a negative decay exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'first_value': 1, 'lambda': 3}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            first_value : int or float\n                The value at the start of the range.\n            lambda : int or float\n                The decay rate parameter of the exponential function.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    # check if the size of the list of parameters is 1, to avoid a division by zero\n    x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n    return dict_param['first_value']*np.exp(-dict_param['lambda']*(1-x))\n",
                                         "name": "init_negexp",
                                         "params": {"first_value": 0.0001,
                                                    "lambda": 3,
                                                    "size_index": 0}},
                            "values": [-0.3053950369358063]},
                "PLinear4W": {"dim": [1, 1],
                              "values": [[-0.09342176467180252]]},
                "PLinear4b": {"dim": 1, "values": [0.1601904183626175]}},
 "Relations": {"Add13": ["Add", ["Linear4", "Fir12"]],
               "Add14": ["Add", ["Add13", "Fir11"]],
               "Fir11": ["Fir", ["ParamFun7"], "PFir10W", "PFir10b", 0],
               "Fir12": ["Fir", ["ParamFun10"], "PFir13W", "PFir13b", 0],
               "Linear4": ["Linear", ["Pow3"], "PLinear4W", "PLinear4b", 0],
               "ParamFun10": ["ParamFun", ["SamplePart9"], "FParamFun9"],
               "ParamFun7": ["ParamFun", ["SamplePart6"], "FParamFun8"],
               "Pow3": ["Pow", ["SamplePart1", "Constant7"]],
               "SamplePart1": ["SamplePart", ["vel"], -1, [-1, 0]],
               "SamplePart16": ["SamplePart", ["acc"], -1, [0, 1]],
               "SamplePart6": ["SamplePart", ["trq"], -1, [-15, 0]],
               "SamplePart9": ["SamplePart", ["trq"], -1, [-15, 0]]}}