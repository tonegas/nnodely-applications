{"Constants": {},
 "Functions": {"FFuzzify5": {"centers": [-0.3245462443934415,
                                         3.6042770373580395],
                             "dim_out": {"dim": 2},
                             "functions": "Triangular",
                             "names": "Triangular"},
               "FParamFun11": {"code": "def understeer_corr(input,vx,  # inputs\n                    A          # learnable parameter\n                    ):\n  return input * (vx / (1 + A * torch.pow(vx,2)))\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1}],
                               "map_over_dim": false,
                               "n_input": 2,
                               "name": "understeer_corr",
                               "params_and_consts": ["FParamFun11A"]}},
 "Info": {"SampleTime": 1,
          "nnodely_version": "1.5.1",
          "ns": [20, 1],
          "ntot": 21,
          "num_parameters": 41},
 "Inputs": {"steer": {"dim": 1, "ns": [20, 0], "ntot": 20, "sw": [-20, 0]},
            "vx": {"dim": 1, "ns": [1, 0], "ntot": 1, "sw": [-1, 0]},
            "yaw_rate": {"dim": 1, "ns": [0, 1], "ntot": 1, "sw": [0, 1]}},
 "Minimizers": {"yaw_rate_error": {"A": "SamplePart16",
                                   "B": "ParamFun14",
                                   "loss": "rmse"}},
 "Models": "yaw_rate",
 "Outputs": {"yaw_rate_": "ParamFun14"},
 "Parameters": {"FParamFun11A": {"dim": 1, "values": [-0.070306196808815]},
                "PFir7W": {"dim": 1,
                           "init_fun": {"code": "def init_negexp(indexes, params_size, dict_param = {'size_index':0, 'first_value':1, 'lambda':3}):\n    '''\n    Initializes parameters using a negative decay exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'first_value': 1, 'lambda': 3}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            first_value : int or float\n                The value at the start of the range.\n            lambda : int or float\n                The decay rate parameter of the exponential function.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    # check if the size of the list of parameters is 1, to avoid a division by zero\n    x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n    return dict_param['first_value']*np.exp(-dict_param['lambda']*(1-x))\n",
                                        "name": "init_negexp",
                                        "params": {"first_value": 0.0001,
                                                   "lambda": 5,
                                                   "monotonicity": "increasing",
                                                   "size_index": 0}},
                           "sw": 20,
                           "values": [[0.07991208136081696],
                                      [-0.02452637255191803],
                                      [-0.07193087786436081],
                                      [-0.03406872600317001],
                                      [0.07128152996301651],
                                      [0.21790708601474762],
                                      [0.12704646587371826],
                                      [-0.010311055928468704],
                                      [-0.056130796670913696],
                                      [-0.12435676157474518],
                                      [-0.11987569183111191],
                                      [0.016110366210341454],
                                      [0.11106639355421066],
                                      [0.011895537376403809],
                                      [-0.13784587383270264],
                                      [-0.03734651207923889],
                                      [0.354482501745224],
                                      [1.3066281080245972],
                                      [1.8803470134735107],
                                      [1.0360982418060303]]},
                "PFir9W": {"dim": 1,
                           "init_fun": {"code": "def init_negexp(indexes, params_size, dict_param = {'size_index':0, 'first_value':1, 'lambda':3}):\n    '''\n    Initializes parameters using a negative decay exponential function.\n\n    Parameters\n    ----------\n    indexes : list\n        List of indexes for the parameters.\n    params_size : list\n        List of sizes for each dimension of the parameters.\n    dict_param : dict, optional\n        Dictionary containing the initialization parameters. Default is {'size_index': 0, 'first_value': 1, 'lambda': 3}.\n            size_index : int\n                The index of the dimension to apply the exponential function.\n            first_value : int or float\n                The value at the start of the range.\n            lambda : int or float\n                The decay rate parameter of the exponential function.\n    '''\n    import numpy as np\n    size_index = dict_param['size_index']\n    # check if the size of the list of parameters is 1, to avoid a division by zero\n    x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n    return dict_param['first_value']*np.exp(-dict_param['lambda']*(1-x))\n",
                                        "name": "init_negexp",
                                        "params": {"first_value": 0.0001,
                                                   "lambda": 5,
                                                   "monotonicity": "increasing",
                                                   "size_index": 0}},
                           "sw": 20,
                           "values": [[-0.006410390604287386],
                                      [0.004296915605664253],
                                      [0.006367896217852831],
                                      [0.0025368109345436096],
                                      [-0.012660160660743713],
                                      [-0.03651684895157814],
                                      [-0.012503238394856453],
                                      [0.00620738510042429],
                                      [0.003953414969146252],
                                      [0.026615170761942863],
                                      [0.0315694622695446],
                                      [0.005867486819624901],
                                      [0.0013544649118557572],
                                      [-8.130905916914344e-05],
                                      [0.02720198966562748],
                                      [0.03300308436155319],
                                      [0.06922730058431625],
                                      [0.031498223543167114],
                                      [0.0030107328202575445],
                                      [0.1139322966337204]]}},
 "Relations": {"Add11": ["Add", ["Mul7", "Mul10"]],
               "Fir5": ["Fir", ["SamplePart4"], "PFir7W", null, 0],
               "Fir8": ["Fir", ["SamplePart4"], "PFir9W", null, 0],
               "Fuzzify2": ["Fuzzify", ["SamplePart1"], "FFuzzify5"],
               "Mul10": ["Mul", ["Fir8", "Select9"]],
               "Mul7": ["Mul", ["Fir5", "Select6"]],
               "ParamFun14": ["ParamFun",
                              ["Add11", "SamplePart13"],
                              "FParamFun11"],
               "SamplePart1": ["SamplePart", ["vx"], -1, [-1, 0]],
               "SamplePart13": ["SamplePart", ["vx"], -1, [-1, 0]],
               "SamplePart16": ["SamplePart", ["yaw_rate"], -1, [0, 1]],
               "SamplePart4": ["SamplePart", ["steer"], -1, [-20, 0]],
               "Select6": ["Select", ["Fuzzify2"], 2, 0],
               "Select9": ["Select", ["Fuzzify2"], 2, 1]}}